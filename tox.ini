[tox]
envlist = 
    py38,
    py39,
    py310,
    py311,
    py312,
    pypy3,
    flake8,
    mypy,
    bandit,
    safety,
    black,
    isort,
    docs
isolated_build = true
skip_missing_interpreters = true

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    pypy-3.8: pypy3

[testenv]
deps = 
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-asyncio>=0.21.0
    pytest-mock>=3.11.0
    pytest-xdist>=3.3.0
    pytest-timeout>=2.1.0
    coverage>=7.2.0
extras = 
    dev
commands = 
    pytest {posargs:-v --tb=short --strict-markers --cov=shadowscan --cov-report=term-missing --cov-report=xml --cov-report=html}
allowlist_externals = 
    echo
    rm
setenv =
    COVERAGE_FILE = {envtmpdir}/.coverage
    PYTHONPATH = {toxinidir}
    PIP_DISABLE_VERSION_CHECK = 1
passenv = 
    CI
    GITHUB_*
    CODECOV_*
    COVERALLS_*
    TRAVIS*
    APPVEYOR*
    PYTEST_*

[testenv:py38]
basepython = python3.8

[testenv:py39]
basepython = python3.9

[testenv:py310]
basepython = python3.10

[testenv:py311]
basepython = python3.11

[testenv:py312]
basepython = python3.12

[testenv:pypy3]
basepython = pypy3

# Code formatting and linting
[testenv:black]
basepython = python3.11
deps = black>=23.7.0
commands = 
    black --check --diff shadowscan tests
skip_install = false

[testenv:black-format]
basepython = python3.11
deps = black>=23.7.0
commands = 
    black shadowscan tests
skip_install = false

[testenv:isort]
basepython = python3.11
deps = isort>=5.12.0
commands = 
    isort --check-only --diff shadowscan tests
skip_install = false

[testenv:isort-format]
basepython = python3.11
deps = isort>=5.12.0
commands = 
    isort shadowscan tests
skip_install = false

[testenv:flake8]
basepython = python3.11
deps = 
    flake8>=6.0.0
    flake8-bugbear>=23.7.0
    flake8-docstrings>=1.7.0
    flake8-import-order>=0.18.0
    flake8-colors>=0.1.9
    pep8-naming>=0.13.0
commands = 
    flake8 shadowscan tests
skip_install = false

[testenv:mypy]
basepython = python3.11
deps = 
    mypy>=1.5.0
    types-requests>=2.31.0
    types-PyYAML>=6.0.0
    types-colorama>=0.4.0
    types-tabulate>=0.9.0
    types-click>=8.1.0
extras = dev
commands = 
    mypy shadowscan
skip_install = false

# Security checks
[testenv:bandit]
basepython = python3.11
deps = bandit[toml]>=1.7.5
commands = 
    bandit -r shadowscan -f json -o {envtmpdir}/bandit-report.json
    bandit -r shadowscan
skip_install = false

[testenv:safety]
basepython = python3.11
deps = safety>=2.3.0
commands = 
    safety check --json --output {envtmpdir}/safety-report.json
    safety check
skip_install = false

# Documentation
[testenv:docs]
basepython = python3.11
deps = 
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0
    sphinx-click>=5.0.0
    sphinx-autodoc-typehints>=1.24.0
extras = docs
commands = 
    sphinx-build -W -b html docs docs/_build/html
    sphinx-build -W -b linkcheck docs docs/_build/linkcheck
allowlist_externals = 
    echo
    rm
    mkdir

[testenv:docs-serve]
basepython = python3.11
deps = 
    {[testenv:docs]deps}
    sphinx-autobuild>=2021.3.14
extras = docs
commands = 
    sphinx-autobuild docs docs/_build/html --host 0.0.0.0 --port 8000
allowlist_externals = 
    echo

# Coverage reporting
[testenv:coverage-report]
basepython = python3.11
deps = coverage>=7.2.0
commands = 
    coverage combine
    coverage report
    coverage html
    coverage xml
skip_install = true
depends = py38,py39,py310,py311,py312

[testenv:coverage-clean]
basepython = python3.11
deps = coverage>=7.2.0
commands = 
    coverage erase
skip_install = true

# Pre-commit checks
[testenv:pre-commit]
basepython = python3.11
deps = pre-commit>=3.3.0
commands = 
    pre-commit run --all-files
skip_install = true
passenv = 
    {[testenv]passenv}
    PRE_COMMIT_HOME
    XDG_CACHE_HOME

[testenv:pre-commit-install]
basepython = python3.11
deps = pre-commit>=3.3.0
commands = 
    pre-commit install
    pre-commit install --hook-type commit-msg
skip_install = true

# Package building and testing
[testenv:build]
basepython = python3.11
deps = 
    build>=0.10.0
    twine>=4.0.0
commands = 
    python -m build
    twine check dist/*
skip_install = true
allowlist_externals = 
    rm
    mkdir

[testenv:clean]
basepython = python3.11
deps = 
commands = 
    rm -rf build/
    rm -rf dist/
    rm -rf *.egg-info/
    rm -rf .coverage
    rm -rf htmlcov/
    rm -rf .pytest_cache/
    rm -rf .mypy_cache/
    rm -rf docs/_build/
skip_install = true
allowlist_externals = 
    rm
    find

# Integration tests (requires network)
[testenv:integration]
basepython = python3.11
deps = 
    {[testenv]deps}
extras = 
    dev
    web
    blockchain
commands = 
    pytest tests/integration/ {posargs:-v --tb=short}
setenv = 
    {[testenv]setenv}
    SHADOWSCAN_INTEGRATION_TESTS = 1
passenv = 
    {[testenv]passenv}
    SHADOWSCAN_*
    WEB3_*
    ETH_*

# Performance tests
[testenv:performance]
basepython = python3.11
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
commands = 
    pytest tests/performance/ {posargs:-v --benchmark-only}

# All checks (for CI)
[testenv:check-all]
basepython = python3.11
deps = 
    {[testenv:flake8]deps}
    {[testenv:mypy]deps}
    {[testenv:bandit]deps}
    {[testenv:safety]deps}
    black>=23.7.0
    isort>=5.12.0
commands = 
    black --check --diff shadowscan tests
    isort --check-only --diff shadowscan tests
    flake8 shadowscan tests
    mypy shadowscan
    bandit -r shadowscan
    safety check
skip_install = false

# Development environment
[testenv:dev]
basepython = python3.11
deps = 
    {[testenv]deps}
    {[testenv:flake8]deps}
    {[testenv:mypy]deps}
    {[testenv:bandit]deps}
    {[testenv:safety]deps}
    black>=23.7.0
    isort>=5.12.0
    pre-commit>=3.3.0
    ipython>=8.0.0
    ipdb>=0.13.0
extras = 
    dev
    docs
    web
    blockchain
    analysis
commands = 
    echo "Development environment ready!"
    echo "Available commands:"
    echo "  pytest                 - Run tests"
    echo "  black shadowscan tests - Format code"
    echo "  flake8 shadowscan      - Lint code"
    echo "  mypy shadowscan        - Type check"
    echo "  bandit -r shadowscan   - Security scan"
    echo "  safety check           - Check dependencies"
    echo "  pre-commit run --all   - Run all hooks"
usedevelop = true
