{
  "vulnerabilities": [
    {
      "contract_address": "0x2345678901234567890123456789012345678901",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 8,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function updateprice(uint256 newprice) external {\n        oracleprices[token] = newprice; // no validation\n    }\n\n    function addliquidity(uint256 amount) external payable {\n        userbalances[msg."
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:02:52.062421",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x2345678901234567890123456789012345678901",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 12,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function addliquidity(uint256 amount) external payable {\n        userbalances[msg.sender] += amount;\n        // flash loan manipulation vulnerability\n        if (amount > 1000 ether) {\n            exe"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:02:52.062444",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 23,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "call(abi.encodewithselector(ierc20.approve.selector, positionmanager, amount));\\n        return success && (data.length == 0 || abi.decode(data, (bool)));\\n    }\\n\\n    /// @inher"
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.478874",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 23,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "call(data);\\n\\n        if (!success) {\\n            // next 5 lines from https://ethereum.stackexchange.com/a/8"
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.478901",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 26,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "call(uint256 deadline, bytes[] calldata data)\\n        external\\n        payable\\n        override\\n        checkdeadline(deadline)\\n        returns (bytes[] memory)\\n    {\\n        return multicall(data);\\n    }\\n\\n    /// @inheritdoc imulticallextended\\n    function multicall(bytes32 previousblockhash,"
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.478908",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 26,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "call(bytes32 previousblockhash, bytes[] calldata data)\\n        external\\n        payable\\n        override\\n        checkpreviousblockhash(previousblockhash)\\n        returns (bytes[] memory)\\n    {\\n        return multicall(data);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/erc20/ierc20.sol\": {\r\n      \"content\": \"//"
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.478912",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 53,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "call(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n    /// @notice call multiple functions in the current contract and return the data from all of "
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.478916",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 53,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "call(bytes32 previousblockhash, bytes[] calldata data)\\n        external\\n        payable\\n        returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/iuniswapv3swapcallback.sol\": {\r\n"
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.478920",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 59,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "call(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/lowgassafemath.sol\": {\r\n      \"content\": \""
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.478923",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 185,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "call(bytes[] calldata data) public payable override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory resul"
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.478927",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 185,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "delegatecall(data[i]);\\n\\n            if (!success) {\\n                // next 5 lines from https://ethereum.stackexchange"
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.478930",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 17,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256;\\n\\n    // supports fee-on-transfer tokens\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(address[] memory path, address _to) private {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = uniswapv2library.sorttokens(input, output);\\n            iuniswapv2pair pair = iuniswapv2pair(uniswapv2library.pairfor(factoryv2, input, output));\\n            uint256 amountinput;\\n            uint256 amountoutput;\\n            // scope to avoid stack too deep errors\\n            {\\n                (uint256 reserve0, uint256 reserve1, ) = pair.getreserves();\\n                (uint256 reserveinput, uint256 reserveoutput) =\\n                    input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n                amountinput = ierc20(input).balanceof(address(pair)).sub(reserveinput);\\n                amountoutput = uniswapv2library.getamountout(amountinput, reserveinput, reserveoutput);\\n            }\\n            (uint256 amount0out, uint256 amount1out) =\\n                input == token0 ? (uint256(0), amountoutput) : (amountoutput, uint256(0));\\n            address to = i < path.length - 2 ? uniswapv2library.pairfor(factoryv2, output, path[i + 2]) : _to;\\n            pair.swap(amount0out, amount1out, to, new bytes(0));\\n        }\\n    }\\n\\n    /// @inheritdoc iv2swaprouter\\n    function swapexacttokensfortokens(\\n        uint256 amountin,\\n        uint256 amountoutmin,\\n        address[] calldata path,\\n        address to\\n    ) external payable override returns (uint256 amountout) {\\n        // use amountin == constants.contract_balance as a flag to swap the entire balance of the contract\\n        bool hasalreadypaid;\\n        if (amountin == constants.contract_balance) {\\n            hasalreadypaid = true;\\n            amountin = ierc20(path[0]).balanceof(address(this));\\n        }\\n\\n        pay(\\n            path[0],\\n            hasalreadypaid ? address(this) : msg.sender,\\n            uniswapv2library.pairfor(factoryv2, path[0], path[1]),\\n            amountin\\n        );\\n\\n        // find and replace to addresses\\n        if (to == constants.msg_sender) to = msg.sender;\\n        else if (to == constants.address_this) to = address(this);\\n\\n        uint256 balancebefore = ierc20(path[path.length - 1]).balanceof(to);\\n\\n        _swap(path, to);\\n\\n        amountout = ierc20(path[path.length - 1]).balanceof(to).sub(balancebefore);\\n        require(amountout >= amountoutmin, 'too little received');\\n    }\\n\\n    /// @inheritdoc iv2swaprouter\\n    function swaptokensforexacttokens(\\n        uint256 amountout,\\n        uint256 amountinmax,\\n        address[] calldata path,\\n        address to\\n    ) external payable override returns (uint256 amountin) {\\n        amountin = uniswapv2library.getamountsin(factoryv2, amountout, path)[0];\\n        require(amountin <= amountinmax, 'too much requested');\\n\\n        pay(path[0], msg.sender, uniswapv2library.pairfor(factoryv2, path[0], path[1]), amountin);\\n\\n        // find and replace to addresses\\n        if (to == constants.msg_sender) "
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568728",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 20,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256;\\n\\n    /// @dev used as the placeholder value for amountincached, because the computed amount in for an exact output swap\\n    /// can never actually be this value\\n    uint256 private constant default_amount_in_cached = type(uint256).max;\\n\\n    /// @dev transient storage variable used for returning the computed amount in for an exact output swap.\\n    uint256 private amountincached = default_amount_in_cached;\\n\\n    /// @dev returns the pool for the given token pair and fee. the pool contract may or may not exist.\\n    function getpool(\\n        address tokena,\\n        address tokenb,\\n        uint24 fee\\n    ) private view returns (iuniswapv3pool) {\\n        return iuniswapv3pool(pooladdress.computeaddress(factory, pooladdress.getpoolkey(tokena, tokenb, fee)));\\n    }\\n\\n    struct swapcallbackdata {\\n        bytes path;\\n        address payer;\\n    }\\n\\n    /// @inheritdoc iuniswapv3swapcallback\\n    function uniswapv3swapcallback(\\n        int256 amount0delta,\\n        int256 amount1delta,\\n        bytes calldata _data\\n    ) external override {\\n        require(amount0delta > 0 || amount1delta > 0); // swaps entirely within 0-liquidity regions are not supported\\n        swapcallbackdata memory data = abi.decode(_data, (swapcallbackdata));\\n        (address tokenin, address tokenout, uint24 fee) = data.path.decodefirstpool();\\n        callbackvalidation.verifycallback(factory, tokenin, tokenout, fee);\\n\\n        (bool isexactinput, uint256 amounttopay) =\\n            amount0delta > 0\\n                ? (tokenin < tokenout, uint256(amount0delta))\\n                : (tokenout < tokenin, uint256(amount1delta));\\n\\n        if (isexactinput) {\\n            pay(tokenin, data.payer, msg.sender, amounttopay);\\n        } else {\\n            // either initiate the next swap or pay\\n            if (data.path.hasmultiplepools()) {\\n                data.path = data.path.skiptoken();\\n                exactoutputinternal(amounttopay, msg.sender, 0, data);\\n            } else {\\n                amountincached = amounttopay;\\n                // note that because exact output swaps are executed in reverse order, tokenout is actually tokenin\\n                pay(tokenout, data.payer, msg.sender, amounttopay);\\n            }\\n        }\\n    }\\n\\n    /// @dev performs a single exact input swap\\n    function exactinputinternal(\\n        uint256 amountin,\\n        address recipient,\\n        uint160 sqrtpricelimitx96,\\n        swapcallbackdata memory data\\n    ) private returns (uint256 amountout) {\\n        // find and replace recipient addresses\\n        if (recipient == constants.msg_sender) recipient = msg.sender;\\n        else if (recipient == constants.address_this) recipient = address(this);\\n\\n        (address tokenin, address tokenout, uint24 fee) = data.path.decodefirstpool();\\n\\n        bool zeroforone = tokenin < tokenout;\\n\\n        (int256 amount0, int256 amount1) =\\n            getpool(tokenin, tokenout, fee).swap(\\n                recipient,\\n                zeroforone,\\n                amountin.toint256(),\\n                sqrtpricelimitx96 == 0\\n                    ? (zeroforone ? tickmath.min_sqrt_ratio + 1 : tickmath.max_sqrt_ratio - 1)\\n                    : sqrtpricelimitx96,\\n                abi.encode(data)\\n            );\\n\\n        return uint256(-(zeroforone ? amount1 : amount0));\\n    }\\n\\n    /// @inheritdoc iv3swaprouter\\n    function exactinputsingle(exactinputsingleparams memory params)\\n        external\\n        payable\\n        override\\n        returns (uint256 amountout)\\n    {\\n        // use amountin == constants.contract_balance as a flag to swap the entire balance of the contract\\n        bool hasalreadypaid;\\n        if (params.amountin == constants.contract_balance) {\\n            hasalreadypaid = true;\\n            params.amountin = ierc20(params.tokenin).balanceof(address(this));\\n        }\\n\\n        amountout = exactinputinternal(\\n            params.amountin,\\n            params.recipient,\\n            params.sqrtpricelimitx96,\\n            swapcallbackdata({\\n                path: abi.encodepacked(params.tokenin, params.fee, params.tokenout),\\n                payer: hasalreadypaid ? address(this) : msg.sender\\n            })\\n        );\\n        require(amountout >= params.amountoutminimum, 'too little received');\\n    }\\n\\n    /// @inheritdoc iv3swaprouter\\n    function exactinput(exactinputparams memory params) external payable override returns (uint256 amountout) {\\n        // use amountin == constants.contract_balance as a flag to swap the entire balance of the contract\\n        bool hasalreadypaid;\\n        if (params.amountin == constants.contract_balance) {\\n            hasalreadypaid = true;\\n            (address tokenin, , ) = params.path.decodefirstpool();\\n            params.amountin = ierc20(tokenin).balanceof(address(this));\\n        }\\n\\n        address payer = hasalreadypaid ? address(this) : msg.sender;\\n\\n        while (true) {\\n            bool hasmultiplepools = params.path.hasmultiplepools();\\n\\n            // the outputs of prior swaps become the inputs to subsequent ones\\n            params.amountin = exactinputinternal(\\n                params.amountin,\\n                hasmultiplepools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\\n                0,\\n                swapcallbackdata({\\n                    path: params.path.getfirstpool(), // only the first pool in the path is necessary\\n                    payer: payer\\n                })\\n            );\\n\\n            // decide whether to continue or terminate\\n            if (hasmultiplepools) {\\n                payer = address(this);\\n                params.path = params.path.skiptoken();\\n            } else {\\n                amountout = params.amountin;\\n                break;\\n            }\\n        }\\n\\n        require(amountout >= params.amountoutminimum, 'too little received');\\n    }\\n\\n    /// @dev performs a single exact output swap\\n    function exactoutputinternal(\\n        uint256 amountout,\\n        address recipient,\\n        uint160 sqrtpricelimitx96,\\n        swapcallbackdata memory data\\n    ) private returns (uint256 amountin) {\\n        // find and replace recipient addresses\\n        if (recipient == constants.msg_sender) recipient = msg.sender;\\n        else if (recipient == constants.address_this) recipient = address(this);\\n\\n        (address tokenout, address tokenin, uint24 fee) = data.path.decodefirstpool();\\n\\n        bool zeroforone = tokenin < tokenout;\\n\\n        (int256 amount0delta, int256 amount1delta) =\\n            getpool(tokenin, tokenout, fee).swap(\\n                recipient,\\n                zeroforone,\\n                -amountout.toint256(),\\n                sqrtpricelimitx96 == 0\\n                    ? (zeroforone ? tickmath.min_sqrt_ratio + 1 : tickmath.max_sqrt_ratio - 1)\\n                    : sqrtpricelimitx96,\\n                abi.encode(data)\\n            );\\n\\n        uint256 amountoutreceived;\\n        (amountin, amountoutreceived) = zeroforone\\n            ? (uint256(amount0delta), uint256(-amount1delta))\\n            : (uint256(amount1delta), uint256(-amount0delta));\\n        // it's technically possible to not receive the full output amount,\\n        // so if no price limit has been specified, require this possibility away\\n        if (sqrtpricelimitx96 == 0) require(amountoutreceived == amountout);\\n    }\\n\\n    /// @inheritdoc iv3swaprouter\\n    function exactoutputsingle(exactoutputsingleparams calldata params)\\n        external\\n        payable\\n        override\\n        returns (uint256 amountin)\\n    {\\n        // avoid an sload by using the swap return data\\n        amountin = exactoutputinternal(\\n            params.amountout,\\n            params.recipient,\\n            params.sqrtpricelimitx96,\\n            swapcallbackdata({path: abi.encodepacked(params.tokenout, params.fee, params.tokenin), payer: msg.sender})\\n        );\\n\\n        require(amountin <= params.amountinmaximum, 'too much requested');\\n        // has to be reset even though we don't use it in the single hop case\\n        amountincached = default_amount_in_cached;\\n    }\\n\\n    /// @inheritdoc iv3swaprouter\\n    function exactoutput(exactoutputparams calldata params) external payable override returns (uint256 amountin) {\\n        exactoutputinternal(\\n            params.amountout,\\n            params.recipient,\\n            0,\\n            swapcallbackdata({path: params.path, payer: msg.sender})\\n        );\\n\\n        amoun"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568754",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 23,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256 amount) private returns (bool) {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodewithselector(ierc20.approve.selector, positionmanager, amount));\\n        return success && (data.length == 0 || abi.decode(data, (bool)));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function getapprovaltype(address token, uint256 amount) external override returns (approvaltype) {\\n        // check existing approval\\n        if (ierc20(token).allowance(address(this), positionmanager) >= amount) return approvaltype.not_required;\\n\\n        // try type(uint256).max / type(uint256).max - 1\\n        if (tryapprove(token, type(uint256).max)) return approvaltype.max;\\n        if (tryapprove(token, type(uint256).max - 1)) return approvaltype.max_minus_one;\\n\\n        // set approval to 0 (must succeed)\\n        require(tryapprove(token, 0));\\n\\n        // try type(uint256).max / type(uint256).max - 1\\n        if (tryapprove(token, type(uint256).max)) return approvaltype.zero_then_max;\\n        if (tryapprove(token, type(uint256).max - 1)) return approvaltype.zero_then_max_minus_one;\\n\\n        revert();\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function approvemax(address token) external payable override {\\n        require(tryapprove(token, type(uint256).max));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function approvemaxminusone(address token) external payable override {\\n        require(tryapprove(token, type(uint256).max - 1));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function approvezerothenmax(address token) external payable override {\\n        require(tryapprove(token, 0));\\n        require(tryapprove(token, type(uint256).max));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function approvezerothenmaxminusone(address token) external payable override {\\n        require(tryapprove(token, 0));\\n        require(tryapprove(token, type(uint256).max - 1));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function callpositionmanager(bytes memory data) public payable override returns (bytes memory result) {\\n        bool success;\\n        (success, result) = positionmanager.call(data);\\n\\n        if (!success) {\\n            // next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n    }\\n\\n    function balanceof(address token) private view returns (uint256) {\\n        return ierc20(token).balanceof(address(this));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function mint(mintparams calldata params) external payable override returns (bytes memory result) {\\n        return\\n            callpositionmanager(\\n                abi.encodewithselector(\\n                    inonfungiblepositionmanager.mint.selector,\\n                    inonfungiblepositionmanager.mintparams({\\n                        token0: params.token0,\\n                        token1: params.token1,\\n                        fee: params.fee,\\n                        ticklower: params.ticklower,\\n                        tickupper: params.tickupper,\\n                        amount0desired: balanceof(params.token0),\\n                        amount1desired: balanceof(params.token1),\\n                        amount0min: params.amount0min,\\n                        amount1min: params.amount1min,\\n                        recipient: params.recipient,\\n                        deadline: type(uint256).max // deadline should be checked via multicall\\n                    })\\n                )\\n            );\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function increaseliquidity(increaseliquidityparams calldata params)\\n        external\\n        payable\\n        override\\n        returns (bytes memory result)\\n    {\\n        return\\n            callpositionmanager(\\n                abi.encodewithselector(\\n                    inonfungiblepositionmanager.increaseliquidity.selector,\\n                    inonfungiblepositionmanager.increaseliquidityparams({\\n                        tokenid: params.tokenid,\\n                        amount0desired: balanceof(params.token0),\\n                        amount1desired: balanceof(params.token1),\\n                        amount0min: params.amount0min,\\n                        amount1min: params.amount1min,\\n                        deadline: type(uint256).max // deadline should be checked via multicall\\n                    })\\n                )\\n      "
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568760",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 29,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256);\\n\\n    /**\\n     * @dev returns the amount of tokens owned by `account`.\\n     */\\n    function balanceof(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * emits a {transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferfrom}. this is\\n     * zero by default.\\n     *\\n     * this value changes when {approve} or {transferfrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * important: beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. one possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/eips/issues/20#issuecomment-263524729\\n     *\\n     * emits an {approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * emits a {transfer} event.\\n     */\\n    function transferfrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * note that `value` may be zero.\\n     */\\n    event transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/drafts/ierc20permit.sol\": {\r\n      \"content\": \""
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568765",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 32,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev returns the current nonce for `owner`. this value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * every successful call to {permit} increases ``owner``'s nonce by one. this\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the domain separator used in the encoding of the signature for `permit`, as defined by {eip712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function domain_separator() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/iselfpermit.sol\": {\r\n      \"conten"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568769",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 47,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint24 fee;\\n        address recipient;\\n        uint256 amountin;\\n        uint256 amountoutminimum;\\n        uint160 sqrtpricelimitx96;\\n    }\\n\\n    /// @notice swaps `amountin` of one token for as much as possible of another token\\n    /// @dev setting `amountin` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params the parameters necessary for the swap, encoded as `exactinputsingleparams` in calldata\\n    /// @return amountout the amount of the received token\\n    function exactinputsingle(exactinputsingleparams calldata params) external payable returns (uint256 amountout);\\n\\n    struct exactinputparams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountin;\\n        uint256 amountoutminimum;\\n    }\\n\\n    /// @notice swaps `amountin` of one token for as much as possible of another along the specified path\\n    /// @dev setting `amountin` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params the parameters necessary for the multi-hop swap, encoded as `exactinputparams` in calldata\\n    /// @return amountout the amount of the received token\\n    function exactinput(exactinputparams calldata params) external payable returns (uint256 amountout);\\n\\n    struct exactoutputsingleparams {\\n        address tokenin;\\n        address tokenout;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountout;\\n        uint256 amountinmaximum;\\n        uint160 sqrtpricelimitx96;\\n    }\\n\\n    /// @notice swaps as little as possible of one token for `amountout` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params the parameters necessary for the swap, encoded as `exactoutputsingleparams` in calldata\\n    /// @return amountin the amount of the input token\\n    function exactoutputsingle(exactoutputsingleparams calldata params) external payable returns (uint256 amountin);\\n\\n    struct exactoutputparams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountout;\\n        uint256 amountinmaximum;\\n    }\\n\\n    /// @notice swaps as little as possible of one token for `amountout` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params the parameters necessary for the multi-hop swap, encoded as `exactoutputparams` in calldata\\n    /// @return amountin the amount of the input token\\n    function exactoutput(exactoutputparams calldata params) external payable returns (uint256 amountin);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/iapproveandcall.sol\": {\r\n      \"content\": \"// s"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568774",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 62,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256\\n    /// @param x the augend\\n    /// @param y the addend\\n    /// @return z the sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice returns x - y, reverts if underflows\\n    /// @param x the minuend\\n    /// @param y the subtrahend\\n    /// @return z the difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice returns x * y, reverts if overflows\\n    /// @param x the multiplicand\\n    /// @param y the multiplier\\n    /// @return z the product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice returns x + y, reverts if overflows or underflows\\n    /// @param x the augend\\n    /// @param y the addend\\n    /// @return z the sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice returns x - y, reverts if overflows or underflows\\n    /// @param x the minuend\\n    /// @param y the subtrahend\\n    /// @return z the difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/immutablestate.sol\": {\r\n      \"content\": \"// spdx-lice"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568778",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 74,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sorttokens(address tokena, address tokenb) internal pure returns (address token0, address token1) {\\n        require(tokena != tokenb);\\n        (token0, token1) = tokena < tokenb ? (tokena, tokenb) : (tokenb, tokena);\\n        require(token0 != address(0));\\n    }\\n\\n    // calculates the create2 address for a pair without making any external calls\\n    function pairfor(\\n        address factory,\\n        address tokena,\\n        address tokenb\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sorttokens(tokena, tokenb);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodepacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encodepacked(token0, token1)),\\n                        hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getreserves(\\n        address factory,\\n        address tokena,\\n        address tokenb\\n    ) internal view returns (uint256 reservea, uint256 reserveb) {\\n        (address token0, ) = sorttokens(tokena, tokenb);\\n        (uint256 reserve0, uint256 reserve1, ) = iuniswapv2pair(pairfor(factory, tokena, tokenb)).getreserves();\\n        (reservea, reserveb) = tokena == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getamountout(\\n        uint256 amountin,\\n        uint256 reservein,\\n        uint256 reserveout\\n    ) internal pure returns (uint256 amountout) {\\n        require(amountin > 0, 'insufficient_input_amount');\\n        require(reservein > 0 && reserveout > 0);\\n        uint256 amountinwithfee = amountin.mul(997);\\n        uint256 numerator = amountinwithfee.mul(reserveout);\\n        uint256 denominator = reservein.mul(1000).add(amountinwithfee);\\n        amountout = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getamountin(\\n        uint256 amountout,\\n        uint256 reservein,\\n        uint256 reserveout\\n    ) internal pure returns (uint256 amountin) {\\n        require(amountout > 0, 'insufficient_output_amount');\\n        require(reservein > 0 && reserveout > 0);\\n        uint256 numerator = reservein.mul(amountout).mul(1000);\\n        uint256 denominator = reserveout.sub(amountout).mul(997);\\n        amountin = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getamountin calculations on any number of pairs\\n    function getamountsin(\\n        address factory,\\n        uint256 amountout,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2);\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountout;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reservein, uint256 reserveout) = getreserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getamountin(amounts[i], reservein, reserveout);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568782",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 80,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256;\\n\\n    /// @inheritdoc iperipherypaymentswithfee\\n    function unwrapweth9withfee(\\n        uint256 amountminimum,\\n        address recipient,\\n        uint256 feebips,\\n        address feerecipient\\n    ) public payable override {\\n        require(feebips > 0 && feebips <= 100);\\n\\n        uint256 balanceweth9 = iweth9(weth9).balanceof(address(this));\\n        require(balanceweth9 >= amountminimum, 'insufficient weth9');\\n\\n        if (balanceweth9 > 0) {\\n            iweth9(weth9).withdraw(balanceweth9);\\n            uint256 feeamount = balanceweth9.mul(feebips) / 10_000;\\n            if (feeamount > 0) transferhelper.safetransfereth(feerecipient, feeamount);\\n            transferhelper.safetransfereth(recipient, balanceweth9 - feeamount);\\n        }\\n    }\\n\\n    /// @inheritdoc iperipherypaymentswithfee\\n    function sweeptokenwithfee(\\n        address token,\\n        uint256 amountminimum,\\n        address recipient,\\n        uint256 feebips,\\n        address feerecipient\\n    ) public payable override {\\n        require(feebips > 0 && feebips <= 100);\\n\\n        uint256 balancetoken = ierc20(token).balanceof(address(this));\\n        require(balancetoken >= amountminimum, 'insufficient token');\\n\\n        if (balancetoken > 0) {\\n            uint256 feeamount = balancetoken.mul(feebips) / 10_000;\\n            if (feeamount > 0) transferhelper.safetransfer(token, feerecipient, feeamount);\\n            transferhelper.safetrans"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568786",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 113,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "int24 internal constant min_tick = -887272;\\n    /// @dev the maximum tick that may be passed to #getsqrtratioattick computed from log base 1.0001 of 2**128\\n    int24 internal constant max_tick = -min_tick;\\n\\n    /// @dev the minimum value that can be returned from #getsqrtratioattick. equivalent to getsqrtratioattick(min_tick)\\n    uint160 internal constant min_sqrt_ratio = 4295128739;\\n    /// @dev the maximum value that can be returned from #getsqrtratioattick. equivalent to getsqrtratioattick(max_tick)\\n    uint160 internal constant max_sqrt_ratio = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev throws if |tick| > max tick\\n    /// @param tick the input tick for the above formula\\n    /// @return sqrtpricex96 a fixed point q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getsqrtratioattick(int24 tick) internal pure returns (uint160 sqrtpricex96) {\\n        uint256 abstick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(abstick <= uint256(max_tick), 't');\\n\\n        uint256 ratio = abstick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (abstick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (abstick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (abstick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (abstick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (abstick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (abstick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (abstick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (abstick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (abstick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (abstick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (abstick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (abstick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (abstick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (abstick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (abstick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (abstick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (abstick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (abstick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (abstick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a q128.128 to a q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so gettickatsqrtratio of the output price is always consistent\\n        sqrtpricex96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice calculates the greatest tick value such that getratioattick(tick) <= ratio\\n    /// @dev throws in case sqrtpricex96 < min_sqrt_ratio, as min_sqrt_ratio is the lowest value getratioattick may\\n    /// ever return.\\n    /// @param sqrtpricex96 the sqrt ratio for which to compute the tick as a q64.96\\n    /// @return tick the greatest tick for which the ratio is less than or equal to the input ratio\\n    function gettickatsqrtratio(uint160 sqrtpricex96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtpricex96 >= min_sqrt_ratio && sqrtpricex96 < max_sqrt_ratio, 'r');\\n        uint256 ratio = uint256(sqrtpricex96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xffffffffffffffffffffffffffffffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xffffffffffffffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xffffffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xf))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 ticklow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickhi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = ticklow == tickhi ? ticklow : getsqrtratioattick(tickhi) <= sqrtpricex96 ? tickhi : ticklow;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/iuniswapv3pool"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568790",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 119,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256 private constant addr_size = 20;\\n    /// @dev the length of the bytes encoded fee\\n    uint256 private constant fee_size = 3;\\n\\n    /// @dev the offset of a single token address and pool fee\\n    uint256 private constant next_offset = addr_size + fee_size;\\n    /// @dev the offset of an encoded pool key\\n    uint256 private constant pop_offset = next_offset + addr_size;\\n    /// @dev the minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant multiple_pools_min_length = pop_offset + next_offset;\\n\\n    /// @notice returns true iff the path contains two or more pools\\n    /// @param path the encoded swap path\\n    /// @return true if path contains two or more pools, otherwise false\\n    function hasmultiplepools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= multiple_pools_min_length;\\n    }\\n\\n    /// @notice returns the number of pools in the path\\n    /// @param path the encoded swap path\\n    /// @return the number of pools in the path\\n    function numpools(bytes memory path) internal pure returns (uint256) {\\n        // ignore the first token address. from then on every fee and token offset indicates a pool.\\n        return ((path.length - addr_size) / next_offset);\\n    }\\n\\n    /// @notice decodes the first pool in path\\n    /// @param path the bytes encoded swap path\\n    /// @return tokena the first token of the given pool\\n    /// @return tokenb the second token of the given pool\\n    /// @return fee the fee level of the pool\\n    function decodefirstpool(bytes memory path)\\n        internal\\n        pure\\n        returns (\\n            address tokena,\\n            address tokenb,\\n            uint24 fee\\n        )\\n    {\\n        tokena = path.toaddress(0);\\n        fee = path.touint24(addr_size);\\n        tokenb = path.toaddress(next_offset);\\n    }\\n\\n    /// @notice gets the segment corresponding to the first pool in the path\\n    /// @param path the bytes encoded swap path\\n    /// @return the segment containing all data necessary to target the first pool in the path\\n    function getfirstpool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, pop_offset);\\n    }\\n\\n    /// @notice skips a token + fee element from the buffer and returns the"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568794",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 128,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "int24 blockstartingtick, int24 currenttick)\\n    {\\n        uint16 observationindex;\\n        uint16 observationcardinality;\\n        (, currenttick, observationindex, observationcardinality, , , ) = pool.slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationcardinality > 1, 'neo');\\n\\n        // if the latest observation occurred in the past, then no tick-changing trades have happened in this block\\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\\n        // we don't need to check if this observation is initialized - it is guaranteed to be.\\n        (uint32 observationtimestamp, int56 tickcumulative, , ) = pool.observations(observationindex);\\n        if (observationtimestamp != uint32(_blocktimestamp())) {\\n            blockstartingtick = currenttick;\\n        } else {\\n            uint256 previndex = (uint256(observationindex) + observationcardinality - 1) % observationcardinality;\\n            (uint32 prevobservationtimestamp, int56 prevtickcumulative, , bool previnitialized) =\\n                pool.observations(previndex);\\n\\n            require(previnitialized, 'oni');\\n\\n            uint32 delta = observationtimestamp - prevobservationtimestamp;\\n            blockstartingtick = int24((tickcumulative - prevtickcumulative) / delta);\\n        }\\n    }\\n\\n    /// @dev virtual function to get pool addresses that can be overridden in tests.\\n    function getpooladdress(\\n        address tokena,\\n        address tokenb,\\n        uint24 fee\\n    ) internal view virtual returns (iuniswapv3pool pool) {\\n        pool = iuniswapv3pool(pooladdress.computeaddress(factory, pooladdress.getpoolkey(tokena, tokenb, fee)));\\n    }\\n\\n    /// @dev returns the synthetic time-weighted average tick as of secondsago, as well as the current tick,\\n    /// for the given path. returned synthetic ticks always represent tokenout/tokenin prices,\\n    /// meaning lower ticks are worse.\\n    function getsyntheticticks(bytes memory path, uint32 secondsago)\\n        internal\\n        view\\n        returns (int256 syntheticaveragetick, int256 syntheticcurrenttick)\\n    {\\n        bool lowerticksareworse;\\n\\n        uint256 numpools = path.numpools();\\n        address previoustokenin;\\n        for (uint256 i = 0; i < numpools; i++) {\\n            // this assumes the path is sorted in swap order\\n            (address tokenin, address tokenout, uint24 fee) = path.decodefirstpool();\\n            iuniswapv3pool pool = getpooladdress(tokenin, tokenout, fee);\\n\\n            // get the average and current ticks for the current pool\\n            int256 averagetick;\\n            int256 currenttick;\\n            if (secondsago == 0) {\\n                // we optimize for the secondsago == 0 case, i.e. since the beginning of the block\\n                (averagetick, currenttick) = getblockstartingandcurrenttick(pool);\\n            } else {\\n                (averagetick, ) = oraclelibrary.consult(address(pool), secondsago);\\n                (, currenttick, , , , , ) = iuniswapv3pool(pool).slot0();\\n            }\\n\\n            if (i == numpools - 1) {\\n                // if we're here, this is the last pool in the path, meaning tokenout represents the\\n                // destination token. so, if tokenin < tokenout, then tokenin is token0 of the last pool,\\n                // meaning the current running ticks are going to represent tokenout/tokenin prices.\\n                // so, the lower these prices get, the worse of a price the swap will get\\n                lowerticksareworse = tokenin < tokenout;\\n            } else {\\n                // if we're here, we need to iterate over the next pool in the path\\n                path = path.skiptoken();\\n                previoustokenin = tokenin;\\n            }\\n\\n            // accumulate the ticks derived from the current pool into the running synthetic ticks,\\n            // ensuring that intermediate tokens \\\"cancel out\\\"\\n            bool add = (i == 0) || (previoustokenin < tokenin ? tokenin < tokenout : tokenout < tokenin);\\n            if (add) {\\n                syntheticaveragetick += averagetick;\\n                syntheticcurrenttick += currenttick;\\n            } else {\\n                syntheticaveragetick -= averagetick;\\n                syntheticcurrenttick -= currenttick;\\n            }\\n        }\\n\\n        // flip the sign of the ticks if necessary, to ensure that the lower ticks are always worse\\n        if (!lowerticksareworse) {\\n            syntheticaveragetick *= -1;\\n            syntheticcurrenttick *= -1;\\n        }\\n    }\\n\\n    /// @dev cast a int256 to a int24, revert on overflow or underflow\\n    function toint24(int256 y) private pure returns (int24 z) {\\n        require((z = int24(y)) == y);\\n    }\\n\\n    /// @dev for each passed path, fetches the synthetic time-weighted average tick as of secondsago,\\n    /// as well as the current tick. then, synthetic ticks from all paths are subjected to a weighted\\n    /// average, where the weights are the fraction of the total input amount allocated to each path.\\n    /// returned synthetic ticks always represent tokenout/tokenin prices, meaning lower ticks are worse.\\n    /// paths must all start and end in the same token.\\n    function getsyntheticticks(\\n        bytes[] memory paths,\\n        uint128[] memory amounts,\\n        uint32 secondsago\\n    ) internal view returns (int256 averagesyntheticaveragetick, int256 averagesyntheticcurrenttick) {\\n        require(paths.length == amounts.length);\\n\\n        oraclelibrary.weightedtickdata[] memory weightedsyntheticaverageticks =\\n            new oraclelibrary.weightedtickdata[](paths.length);\\n        oraclelibrary.weightedtickdata[] memory weightedsyntheticcurrentticks =\\n            new oraclelibrary.weightedtickdata[](paths.length);\\n\\n        for (uint256 i = 0; i < paths.length; i++) {\\n            (int256 syntheticaveragetick, int256 syntheticcurrenttick) = getsyntheticticks(paths[i], secondsago);\\n            weightedsyntheticaverageticks[i].tick = toint24(syntheticaveragetick);\\n            weightedsyntheticcurrentticks[i].tick = toint24(syntheticcurrenttick);\\n            weightedsyntheticaverageticks[i].weight = amounts[i];\\n            weightedsyntheticcurrentticks[i].weight = amounts[i];\\n        }\\n\\n        averagesyntheticaveragetick = oraclelibrary.getweightedarithmeticmeantick(weightedsyntheticaverageticks);\\n        averagesyntheticcurrenttick = oraclelibrary.getweightedarithmeticmeantick(weightedsyntheticcurrentticks);\\n    }\\n\\n    /// @inheritdoc ioracleslippage\\n    function checkoracleslippage(\\n        bytes memory path,\\n        uint24 maximumtickdivergence,\\n        uint32 secondsago\\n    ) external view override {\\n        (int256 syntheticaveragetick, int256 syntheticcurrenttick) = getsyntheticticks(path, secondsago);\\n        require(syntheticaveragetick - syntheticcurrenttick < maximumtickdivergence, 'td');\\n    }\\n\\n    /// @inheritdoc ioracleslippage\\n    function checkoracleslippage(\\n        bytes[] memory paths,\\n        uint128[] memory amounts,\\n        uint24 maximumtickdivergence,\\n        uint32 secondsago\\n    ) external view override {\\n        (int256 averagesyntheticaveragetick, int256 averagesyntheticcurrenttick) =\\n            getsyntheticticks(paths, amounts, secondsago);\\n       "
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568798",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 131,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint24);\\n\\n    /// @notice the pool tick spacing\\n    /// @dev ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickspacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// this value is an int24 to avoid casting even though it is always positive.\\n    /// @return the tick spacing\\n    function tickspacing() external view returns (int24);\\n\\n    /// @notice the maximum amount of position liquidity that can use any tick in the range\\n    /// @dev this parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return the max amount of liquidity per tick\\n    function maxliquiditypertick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/iuniswapv3poolstate.sol\": {\r\n     "
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568802",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 140,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint160 sqrtpricex96) external;\\n\\n    /// @notice adds liquidity for the given recipient/ticklower/tickupper position\\n    /// @dev the caller of this method receives a callback in the form of iuniswapv3mintcallback#uniswapv3mintcallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. the amount of token0/token1 due depends\\n    /// on ticklower, tickupper, the amount of liquidity, and the current price.\\n    /// @param recipient the address for which the liquidity will be created\\n    /// @param ticklower the lower tick of the position in which to add liquidity\\n    /// @param tickupper the upper tick of the position in which to add liquidity\\n    /// @param amount the amount of liquidity to mint\\n    /// @param data any data that should be passed through to the callback\\n    /// @return amount0 the amount of token0 that was paid to mint the given amount of liquidity. matches the value in the callback\\n    /// @return amount1 the amount of token1 that was paid to mint the given amount of liquidity. matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 ticklower,\\n        int24 tickupper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice collects tokens owed to a position\\n    /// @dev does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// collect must be called by the position owner. to withdraw only token0 or only token1, amount0requested or\\n    /// amount1requested may be set to zero. to withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient the address which should receive the fees collected\\n    /// @param ticklower the lower tick of the position for which to collect fees\\n    /// @param tickupper the upper tick of the position for which to collect fees\\n    /// @param amount0requested how much token0 should be withdrawn from the fees owed\\n    /// @param amount1requested how much token1 should be withdrawn from the fees owed\\n    /// @return amount0 the amount of fees collected in token0\\n    /// @return amount1 the amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 ticklower,\\n        int24 tickupper,\\n        uint128 amount0requested,\\n        uint128 amount1requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev fees must be collected separately via a call to #collect\\n    /// @param ticklower the lower tick of the position for which to burn liquidity\\n    /// @param tickupper the upper tick of the position for which to burn liquidity\\n    /// @param amount how much liquidity to burn\\n    /// @return amount0 the amount of token0 sent to the recipient\\n    /// @return amount1 the amount of token1 sent to the recipient\\n    function burn(\\n        int24 ticklower,\\n        int24 tickupper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice swap token0 for token1, or token1 for token0\\n    /// @dev the caller of this method receives a callback in the form of iuniswapv3swapcallback#uniswapv3swapcallback\\n    /// @param recipient the address to receive the output of the swap\\n    /// @param zeroforone the direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountspecified the amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtpricelimitx96 the q64.96 sqrt price limit. if zero for one, the price cannot be less than this\\n    /// value after the swap. if one for zero, the price cannot be greater than this value after the swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amount0 the delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 the delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroforone,\\n        int256 amountspecified,\\n        uint160 sqrtpricelimitx96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev the caller of this method receives a callback in the form of iuniswapv3flashcallback#uniswapv3flashcallback\\n    /// @dev can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient the address which will receive the token0 and token1 amounts\\n    /// @param amount0 the amount of token0 to send\\n    /// @param amount1 the amount of token1 to send\\n    /// @param data any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev this method is no-op if the pool already has an observationcardinalitynext greater than or equal to\\n    /// the input observationcardinalitynext.\\n    /// @param observationcardinalitynext the desired minimum number of observations for the pool to store\\n    function increaseobservationcardinalitynext(uint16 observationcardinalitynext) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/poo"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568806",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 149,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_start + _length >= _start, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outofbounds');\\n\\n        bytes memory tempbytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // get a location of some free memory and store it in tempbytes as\\n                    // solidity does for memory variables.\\n                    tempbytes := mload(0x40)\\n\\n                    // the first word of the slice result is potentially a partial\\n                    // word read from the original array. to read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. the first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. when\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // the multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempbytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // the multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempbytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempbytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because solidity does not garbage collect\\n                    mstore(tempbytes, 0)\\n\\n                    mstore(0x40, add(tempbytes, 0x20))\\n                }\\n        }\\n\\n        return tempbytes;\\n    }\\n\\n    function toaddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_start + 20 >= _start, 'toaddress_overflow');\\n        require(_bytes.length >= _start + 20, 'toaddress_outofbounds');\\n        address tempaddress;\\n\\n        assembly {\\n            tempaddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempaddress;\\n    }\\n\\n    function touint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_start + 3 >= _start, 'touint24_overflow');\\n        require(_bytes.length >= _start + 3, 'touint24_outofbounds');\\n        uint24 tempuint;\\n\\n        assembly {\\n            tempuint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempuint;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/i"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568810",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 158,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint32 secondsago)\\n        internal\\n        view\\n        returns (int24 arithmeticmeantick, uint128 harmonicmeanliquidity)\\n    {\\n        require(secondsago != 0, 'bp');\\n\\n        uint32[] memory secondsagos = new uint32[](2);\\n        secondsagos[0] = secondsago;\\n        secondsagos[1] = 0;\\n\\n        (int56[] memory tickcumulatives, uint160[] memory secondsperliquiditycumulativex128s) =\\n            iuniswapv3pool(pool).observe(secondsagos);\\n\\n        int56 tickcumulativesdelta = tickcumulatives[1] - tickcumulatives[0];\\n        uint160 secondsperliquiditycumulativesdelta =\\n            secondsperliquiditycumulativex128s[1] - secondsperliquiditycumulativex128s[0];\\n\\n        arithmeticmeantick = int24(tickcumulativesdelta / secondsago);\\n        // always round to negative infinity\\n        if (tickcumulativesdelta < 0 && (tickcumulativesdelta % secondsago != 0)) arithmeticmeantick--;\\n\\n        // we are multiplying here instead of shifting to ensure that harmonicmeanliquidity doesn't overflow uint128\\n        uint192 secondsagox160 = uint192(secondsago) * type(uint160).max;\\n        harmonicmeanliquidity = uint128(secondsagox160 / (uint192(secondsperliquiditycumulativesdelta) << 32));\\n    }\\n\\n    /// @notice given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick tick value used to calculate the quote\\n    /// @param baseamount amount of token to be converted\\n    /// @param basetoken address of an erc20 token contract used as the baseamount denomination\\n    /// @param quotetoken address of an erc20 token contract used as the quoteamount denomination\\n    /// @return quoteamount amount of quotetoken received for baseamount of basetoken\\n    function getquoteattick(\\n        int24 tick,\\n        uint128 baseamount,\\n        address basetoken,\\n        address quotetoken\\n    ) internal pure returns (uint256 quoteamount) {\\n        uint160 sqrtratiox96 = tickmath.getsqrtratioattick(tick);\\n\\n        // calculate quoteamount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtratiox96 <= type(uint128).max) {\\n            uint256 ratiox192 = uint256(sqrtratiox96) * sqrtratiox96;\\n            quoteamount = basetoken < quotetoken\\n                ? fullmath.muldiv(ratiox192, baseamount, 1 << 192)\\n                : fullmath.muldiv(1 << 192, baseamount, ratiox192);\\n        } else {\\n            uint256 ratiox128 = fullmath.muldiv(sqrtratiox96, sqrtratiox96, 1 << 64);\\n            quoteamount = basetoken < quotetoken\\n                ? fullmath.muldiv(ratiox128, baseamount, 1 << 128)\\n                : fullmath.muldiv(1 << 128, baseamount, ratiox128);\\n        }\\n    }\\n\\n    /// @notice given a pool, it returns the number of seconds ago of the oldest stored observation\\n    /// @param pool address of uniswap v3 pool that we want to observe\\n    /// @return secondsago the number of seconds ago of the oldest observation stored for the pool\\n    function getoldestobservationsecondsago(address pool) internal view returns (uint32 secondsago) {\\n        (, , uint16 observationindex, uint16 observationcardinality, , , ) = iuniswapv3pool(pool).slot0();\\n        require(observationcardinality > 0, 'ni');\\n\\n        (uint32 observationtimestamp, , , bool initialized) =\\n            iuniswapv3pool(pool).observations((observationindex + 1) % observationcardinality);\\n\\n        // the next index might not be initialized if the cardinality is in the process of increasing\\n        // in this case the oldest observation is always in index 0\\n        if (!initialized) {\\n            (observationtimestamp, , , ) = iuniswapv3pool(pool).observations(0);\\n        }\\n\\n        secondsago = uint32(block.timestamp) - observationtimestamp;\\n    }\\n\\n    /// @notice given a pool, it returns the tick value as of the start of the current block\\n    /// @param pool address of uniswap v3 pool\\n    /// @return the tick that the pool was in at the start of the current block\\n    function getblockstartingtickandliquidity(address pool) internal view returns (int24, uint128) {\\n        (, int24 tick, uint16 observationindex, uint16 observationcardinality, , , ) = iuniswapv3pool(pool).slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationcardinality > 1, 'neo');\\n\\n        // if the latest observation occurred in the past, then no tick-changing trades have happened in this block\\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\\n        // we don't need to check if this observation is initialized - it is guaranteed to be.\\n        (uint32 observationtimestamp, int56 tickcumulative, uint160 secondsperliquiditycumulativex128, ) =\\n            iuniswapv3pool(pool).observations(observationindex);\\n        if (observationtimestamp != uint32(block.timestamp)) {\\n            return (tick, iuniswapv3pool(pool).liquidity());\\n        }\\n\\n        uint256 previndex = (uint256(observationindex) + observationcardinality - 1) % observationcardinality;\\n        (\\n            uint32 prevobservationtimestamp,\\n            int56 prevtickcumulative,\\n            uint160 prevsecondsperliquiditycumulativex128,\\n            bool previnitialized\\n        ) = iuniswapv3pool(pool).observations(previndex);\\n\\n        require(previnitialized, 'oni');\\n\\n        uint32 delta = observationtimestamp - prevobservationtimestamp;\\n        tick = int24((tickcumulative - prevtickcumulative) / delta);\\n        uint128 liquidity =\\n            uint128(\\n                (uint192(delta) * type(uint160).max) /\\n                    (uint192(secondsperliquiditycumulativex128 - prevsecondsperliquiditycumulativex128) << 32)\\n            );\\n        return (tick, liquidity);\\n    }\\n\\n    /// @notice information for calculating a weighted arithmetic mean tick\\n    struct weightedtickdata {\\n        int24 tick;\\n        uint128 weight;\\n    }\\n\\n    /// @notice given an array of ticks and weights, calculates the weighted arithmetic mean tick\\n    /// @param weightedtickdata an array of ticks and weights\\n    /// @return weightedarithmeticmeantick the weighted arithmetic mean tick\\n    /// @dev each entry of `weightedtickdata` should represents ticks from pools with the same underlying pool tokens. if they do not,\\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\\n    /// @dev note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\\n    function getweightedarithmeticmeantick(weightedtickdata[] memory weightedtickdata)\\n        internal\\n        pure\\n        returns (int24 weightedarithmeticmeantick)\\n    {\\n        // accumulates the sum of products between each tick and its weight\\n        int256 numerator;\\n\\n        // accumulates the sum of the weights\\n        uint256 denominator;\\n\\n        // products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\\n        for (uint256 i; i < weightedtickdata.length; i++) {\\n            numerator += weightedtickdata[i].tick * int256(weightedtickdata[i].weight);\\n            denominator += weightedtickdata[i].weight;\\n        }\\n\\n        weightedarithmeticmeantick = int24(numerator / int256(denominator));\\n        // always round to negative infinity\\n        if (numerator < 0 && (numerator % int256(denominator) != 0)) weightedarithmeticmeantick--;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/ful"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568814",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 161,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256 or denominator == 0\\n    /// @param a the multiplicand\\n    /// @param b the multiplier\\n    /// @param denominator the divisor\\n    /// @return result the 256-bit result\\n    /// @dev credit to remco bloemen under mit license https://xn--2-umb.com/21/muldiv\\n    function muldiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the chinese remainder theorem to reconstruct\\n        // the 512 bit result. the result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // least significant 256 bits of the product\\n        uint256 prod1; // most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // make sure the result is less than 2**256.\\n        // also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // make division exact by subtracting the remainder from [prod1 prod0]\\n        // compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // factor powers of two out of denominator\\n        // compute largest power of two divisor of denominator.\\n        // always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // shift in bits from prod1 into prod0. for this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // if twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // invert denominator mod 2**256\\n        // now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // compute the inverse by starting with a seed that is correct\\n        // correct for four bits. that is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // now use newton-raphson iteration to improve the precision.\\n        // thanks to hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. this will give us the\\n        // correct result modulo 2**256. since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // we don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice calculates ceil(a\u00d7b\u00f7denominator) with full precision. throws if result overflows a uint256 or denominator == 0\\n    /// @param a the multiplicand\\n    /// @param b the multiplier\\n    /// @param denominator the divisor\\n    /// @return result the 256-bit result\\n    function muldivroundingup(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = muldiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568818",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 179,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256 indexed tokenid);\\n\\n    /**\\n     * @dev emitted when `owner` enables `approved` to manage the `tokenid` token.\\n     */\\n    event approval(address indexed owner, address indexed approved, uint256 indexed tokenid);\\n\\n    /**\\n     * @dev emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event approvalforall(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceof(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev returns the owner of the `tokenid` token.\\n     *\\n     * requirements:\\n     *\\n     * - `tokenid` must exist.\\n     */\\n    function ownerof(uint256 tokenid) external view returns (address owner);\\n\\n    /**\\n     * @dev safely transfers `tokenid` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the erc721 protocol to prevent tokens from being forever locked.\\n     *\\n     * requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenid` token must exist and be owned by `from`.\\n     * - if the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setapprovalforall}.\\n     * - if `to` refers to a smart contract, it must implement {ierc721receiver-onerc721received}, which is called upon a safe transfer.\\n     *\\n     * emits a {transfer} event.\\n     */\\n    function safetransferfrom(address from, address to, uint256 tokenid) external;\\n\\n    /**\\n     * @dev transfers `tokenid` token from `from` to `to`.\\n     *\\n     * warning: usage of this method is discouraged, use {safetransferfrom} whenever possible.\\n     *\\n     * requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenid` token must be owned by `from`.\\n     * - if the caller is not `from`, it must be approved to move this token by either {approve} or {setapprovalforall}.\\n     *\\n     * emits a {transfer} event.\\n     */\\n    function transferfrom(address from, address to, uint256 tokenid) external;\\n\\n    /**\\n     * @dev gives permission to `to` to transfer `tokenid` token to another account.\\n     * the approval is cleared when the token is transferred.\\n     *\\n     * only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * requirements:\\n     *\\n     * - the caller must own the token or be an approved operator.\\n     * - `tokenid` must exist.\\n     *\\n     * emits an {approval} event.\\n     */\\n    function approve(address to, uint256 tokenid) external;\\n\\n    /**\\n     * @dev returns the account approved for `tokenid` token.\\n     *\\n     * requirements:\\n     *\\n     * - `tokenid` must exist.\\n     */\\n    function getapproved(uint256 tokenid) external view returns (address operator);\\n\\n    /**\\n     * @dev approve or remove `operator` as an operator for the caller.\\n     * operators can call {transferfrom} or {safetransferfrom} for any token owned by the caller.\\n     *\\n     * requirements:\\n     *\\n     * - the `operator` cannot be the caller.\\n     *\\n     * emits an {approvalforall} event.\\n     */\\n    function setapprovalforall(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * see {setapprovalforall}\\n     */\\n    function isapprovedforall(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev safely transfers `tokenid` token from `from` to `to`.\\n      *\\n      * requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenid` token must exist and be owned by `from`.\\n      * - if the caller is not `from`, it must be approved to move this token by either {approve} or {setapprovalforall}.\\n      * - if `to` refers to a smart contract, it must implement {ierc721receiver-onerc721received}, which is called upon a safe transfer.\\n      *\\n      * emits a {transfer} event.\\n      */\\n    function safetransferfrom(address from, address to, uint256 tokenid, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/i"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568821",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 185,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n      "
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568825",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 110,
        "pattern": "(uint|int)\\d+.*\\*\\s*\\d+",
        "snippet": "uint256 to a uint160, revert on overflow\\n    /// @param y the uint256 to be downcasted\\n    /// @return z the downcasted integer, now type uint160\\n    function touint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y the int256 to be downcasted\\n    /// @return z the downcasted integer, now type int128\\n    function toint128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice cast a uint256 to a int256, revert on overflow\\n    /// @param y the uint256 to be casted\\n    /// @return z the casted integer, now type int256\\n    function toint256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/tickmath."
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568829",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 113,
        "pattern": "(uint|int)\\d+.*\\*\\s*\\d+",
        "snippet": "int24 internal constant min_tick = -887272;\\n    /// @dev the maximum tick that may be passed to #getsqrtratioattick computed from log base 1.0001 of 2**128\\n    int24 internal constant max_tick = -min_tick;\\n\\n    /// @dev the minimum value that can be returned from #getsqrtratioattick. equivalent to getsqrtratioattick(min_tick)\\n    uint160 internal constant min_sqrt_ratio = 4295128739;\\n    /// @dev the maximum value that can be returned from #getsqrtratioattick. equivalent to getsqrtratioattick(max_tick)\\n    uint160 internal constant max_sqrt_ratio = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev throws if |tick| > max tick\\n    /// @param tick the input tick for the above formula\\n    /// @return sqrtpricex96 a fixed point q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getsqrtratioattick(int24 tick) internal pure returns (uint160 sqrtpricex96) {\\n        uint256 abstick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(abstick <= uint256(max_tick), 't');\\n\\n        uint256 ratio = abstick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (abstick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (abstick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (abstick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (abstick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (abstick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (abstick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (abstick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (abstick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (abstick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (abstick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (abstick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (abstick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (abstick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (abstick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (abstick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (abstick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (abstick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (abstick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (abstick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a q128.128 to a q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so gettickatsqrtratio of the output price is always consistent\\n        sqrtpricex96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice calculates the greatest tick value such that getratioattick(tick) <= ratio\\n    /// @dev throws in case sqrtpricex96 < min_sqrt_ratio, as min_sqrt_ratio is the lowest value getratioattick may\\n    /// ever return.\\n    /// @param sqrtpricex96 the sqrt ratio for which to compute the tick as a q64.96\\n    /// @return tick the greatest tick for which the ratio is less than or equal to the input ratio\\n    function gettickatsqrtratio(uint160 sqrtpricex96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtpricex96 >= min_sqrt_ratio && sqrtpricex96 < max_sqrt_ratio, 'r');\\n        uint256 ratio = uint256(sqrtpricex96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xffffffffffffffffffffffffffffffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xffffffffffffffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xffffffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xf))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 ticklow = int24((log_sqrt10001 - 340299295680913241859614010066"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568833",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 158,
        "pattern": "(uint|int)\\d+.*\\*\\s*\\d+",
        "snippet": "uint32 secondsago)\\n        internal\\n        view\\n        returns (int24 arithmeticmeantick, uint128 harmonicmeanliquidity)\\n    {\\n        require(secondsago != 0, 'bp');\\n\\n        uint32[] memory secondsagos = new uint32[](2);\\n        secondsagos[0] = secondsago;\\n        secondsagos[1] = 0;\\n\\n        (int56[] memory tickcumulatives, uint160[] memory secondsperliquiditycumulativex128s) =\\n            iuniswapv3pool(pool).observe(secondsagos);\\n\\n        int56 tickcumulativesdelta = tickcumulatives[1] - tickcumulatives[0];\\n        uint160 secondsperliquiditycumulativesdelta =\\n            secondsperliquiditycumulativex128s[1] - secondsperliquiditycumulativex128s[0];\\n\\n        arithmeticmeantick = int24(tickcumulativesdelta / secondsago);\\n        // always round to negative infinity\\n        if (tickcumulativesdelta < 0 && (tickcumulativesdelta % secondsago != 0)) arithmeticmeantick--;\\n\\n        // we are multiplying here instead of shifting to ensure that harmonicmeanliquidity doesn't overflow uint128\\n        uint192 secondsagox160 = uint192(secondsago) * type(uint160).max;\\n        harmonicmeanliquidity = uint128(secondsagox160 / (uint192(secondsperliquiditycumulativesdelta) << 32));\\n    }\\n\\n    /// @notice given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick tick value used to calculate the quote\\n    /// @param baseamount amount of token to be converted\\n    /// @param basetoken address of an erc20 token contract used as the baseamount denomination\\n    /// @param quotetoken address of an erc20 token contract used as the quoteamount denomination\\n    /// @return quoteamount amount of quotetoken received for baseamount of basetoken\\n    function getquoteattick(\\n        int24 tick,\\n        uint128 baseamount,\\n        address basetoken,\\n        address quotetoken\\n    ) internal pure returns (uint256 quoteamount) {\\n        uint160 sqrtratiox96 = tickmath.getsqrtratioattick(tick);\\n\\n        // calculate quoteamount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtratiox96 <= type(uint128).max) {\\n            uint256 ratiox192 = uint256(sqrtratiox96) * sqrtratiox96;\\n            quoteamount = basetoken < quotetoken\\n                ? fullmath.muldiv(ratiox192, baseamount, 1 << 192)\\n                : fullmath.muldiv(1 << 192, baseamount, ratiox192);\\n        } else {\\n            uint256 ratiox128 = fullmath.muldiv(sqrtratiox96, sqrtratiox96, 1 << 64);\\n            quoteamount = basetoken < quotetoken\\n                ? fullmath.muldiv(ratiox128, baseamount, 1 << 128)\\n                : fullmath.muldiv(1 << 128, baseamount, ratiox128);\\n        }\\n    }\\n\\n    /// @notice given a pool, it returns the number of seconds ago of the oldest stored observation\\n    /// @param pool address of uniswap v3 pool that we want to observe\\n    /// @return secondsago the number of seconds ago of the oldest observation stored for the pool\\n    function getoldestobservationsecondsago(address pool) internal view returns (uint32 secondsago) {\\n        (, , uint16 observationindex, uint16 observationcardinality, , , ) = iuniswapv3pool(pool).slot0();\\n        require(observationcardinality > 0, 'ni');\\n\\n        (uint32 observationtimestamp, , , bool initialized) =\\n            iuniswapv3pool(pool).observations((observationindex + 1) % observationcardinality);\\n\\n        // the next index might not be initialized if the cardinality is in the process of increasing\\n        // in this case the oldest observation is always in index 0\\n        if (!initialized) {\\n            (observationtimestamp, , , ) = iuniswapv3pool(pool).observations(0);\\n        }\\n\\n        secondsago = uint32(block.timestamp) - observationtimestamp;\\n    }\\n\\n    /// @notice given a pool, it returns the tick value as of the start of the current block\\n    /// @param pool address of uniswap v3 pool\\n    /// @return the tick that the pool was in at the start of the current block\\n    function getblockstartingtickandliquidity(address pool) internal view returns (int24, uint128) {\\n        (, int24 tick, uint16 observationindex, uint16 observationcardinality, , , ) = iuniswapv3pool(pool).slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationcardinality > 1, 'neo');\\n\\n        // if the latest observation occurred in the past, then no tick-changing trades have happened in this block\\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\\n        // we don't need to check if this observation is initialized - it is guaranteed to be.\\n        (uint32 observationtimestamp, int56 tickcumulative, uint160 secondsperliquiditycumulativex128, ) =\\n            iuniswapv3pool(pool).observations(observationindex);\\n        if (observationtimestamp != uint32(block.timestamp)) {\\n            return (tick, iuniswapv3pool(pool).liquidity());\\n        }\\n\\n        uint256 previndex = (uint256(observationindex) + observationcardinality - 1) % observationcardinality;\\n        (\\n            uint32 prevobservationtimestamp,\\n            int56 prevtickcumulative,\\n            uint160 prevsecondsperliquiditycumulativex128,\\n            bool previnitialized\\n        ) = iuniswapv3pool(pool).observations(previndex);\\n\\n        require(previnitialized, 'oni');\\n\\n        uint32 delta = observationtimestamp - prevobservationtimestamp;\\n        tick = int24((tickcumulative - prevtickcumulative) / delta);\\n        uint128 liquidity =\\n            uint128(\\n                (uint192(delta) * type(uint160).max) /\\n                    (uint192(secondsperliquiditycumulativex128 - prevsecondsperliquiditycumulativex128) << 32)\\n            );\\n        return (tick, liquidity);\\n    }\\n\\n    /// @notice information for calculating a weighted arithmetic mean tick\\n    struct weightedtickdata {\\n        int24 tick;\\n        uint128 weight;\\n    }\\n\\n    /// @notice given an array of ticks and weights, calculates the weighted arithmetic mean tick\\n    /// @param weightedtickdata an array of ticks and weights\\n    /// @return weightedarithmeticmeantick the weighted arithmetic mean tick\\n    /// @dev each entry of `weightedtickdata` should represents ticks from pools with the same underlying pool tokens. if they do not,\\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\\n    /// @dev note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\\n    function getweightedarithmeticmeantick(weightedtickdata[] memory weightedtickdata)\\n        internal\\n        pure\\n        returns (int24 weightedarithmeticmeantick)\\n    {\\n        // accumulates the sum of products between each tick and its weight\\n        int256 numerator;\\n\\n        // accumulates the sum of the weights\\n        uint256 denominator;\\n\\n        // products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\\n        for (uint256 i; i < weightedtickdata.length; i++) {\\n            nu"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568837",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 161,
        "pattern": "(uint|int)\\d+.*\\*\\s*\\d+",
        "snippet": "uint256 or denominator == 0\\n    /// @param a the multiplicand\\n    /// @param b the multiplier\\n    /// @param denominator the divisor\\n    /// @return result the 256-bit result\\n    /// @dev credit to remco bloemen under mit license https://xn--2-umb.com/21/muldiv\\n    function muldiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the chinese remainder theorem to reconstruct\\n        // the 512 bit result. the result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // least significant 256 bits of the product\\n        uint256 prod1; // most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // make sure the result is less than 2**256.\\n        // also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // make division exact by subtracting the remainder from [prod1 prod0]\\n        // compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // factor powers of two out of denominator\\n        // compute largest power of two divisor of denominator.\\n        // always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // shift in bits from prod1 into prod0. for this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // if twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // invert denominator mod 2**256\\n        // now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // compute the inverse by starting with a seed that is correct\\n        // correct for four bits. that is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // now use newton-raphson iteration to improve the precision.\\n        // thanks to hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. this will give us the\\n        // correct result modulo 2**256. since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // we don't need to compute the high bits of the result and pro"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568841",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 23,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "uint256 amount) private returns (bool) {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodewithselector(ierc20.approve.selector, positionmanager, amount));\\n        return success && (data.length == 0 || abi.decode(data, (bool)));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function getapprovaltype(address token, uint256 amount) external override returns (approvaltype) {\\n        // check existing approval\\n        if (ierc20(token).allowance(address(this), positionmanager) >= amount) return approvaltype.not_required;\\n\\n        // try type(uint256).max / type(uint256).max - 1\\n        if (tryapprove(token, type(uint256).max)) return approvaltype.max;\\n        if (tryapprove(token, type(uint256).max - 1)) return approvaltype.max_minus_one;\\n\\n        // set approval to 0 (must succeed)\\n        require(tryapprove(token, 0));\\n\\n        // try type(uint256).max / type(uint256).max - 1\\n        if (tryapprove(token, type(uint256).max)) return approvaltype.zero_then_max;\\n        if (tryapprove(token, type(uint256).max - 1)) return approvaltype.zero_then_max_minus_one;\\n\\n        revert();\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function approvemax(address token) external payable override {\\n        require(tryapprove(token, type(uint256).max));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function approvemaxminusone(address token) external payable override {\\n        require(tryapprove(token, type(uint256).max - 1));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function approvezerothenmax(address token) external payable override {\\n        require(tryapprove(token, 0));\\n        require(tryapprove(token, type(uint256).max));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function approvezerothenmaxminusone(address token) external payable override {\\n        require(tryapprove(token, 0));\\n        require(tryapprove(token, type(uint256).max - 1));\\n    }\\n\\n    /// @inheritdoc iapproveandcall\\n    function callpositionmanager(bytes memory data) public payable override returns (bytes memory result) {\\n        bool success;\\n        (success, result) = positionmanager.call(data);\\n\\n        if (!success) {\\n            // next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := a"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568845",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 29,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "uint256);\\n\\n    /**\\n     * @dev returns the amount of tokens owned by `account`.\\n     */\\n    function balanceof(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * emits a {transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferfrom}. this is\\n     * zero by default.\\n     *\\n     * this value changes when {approve} or {transferfrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * important: beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. one possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/eips/issues/20#issuecomment-263524729\\n     *\\n     * emits an {approval} event.\\n     */\\n    function approve(ad"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568849",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 80,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "uint256;\\n\\n    /// @inheritdoc iperipherypaymentswithfee\\n    function unwrapweth9withfee(\\n        uint256 amountminimum,\\n        address recipient,\\n        uint256 feebips,\\n        address feerecipient\\n    ) public payable override {\\n        require(feebips > 0 && feebips <= 100);\\n\\n        uint256 balanceweth9 = iweth9(weth9).balanceof(address(this));\\n        require(balanceweth9 >= amountminimum, 'insufficient weth9');\\n\\n        if (balanceweth9 > 0) {\\n            iweth9(weth9).withdraw(balanceweth9);\\n            uint256 feeamount = balanceweth9.mul(feebips) / 10_000;\\n            if (feeamount > 0) transferhelper.safetransfereth(feerecipient, feeamount);\\n            transferhelper.safetransfereth(recipient, balanceweth9 - feeamount);\\n        }\\n    }\\n\\n    /// @inheritdoc iperipherypaymentswithfee\\n    function sweeptokenwithfee(\\n        address token,\\n        uint256 amountminimum,\\n        address recipient,\\n        uint256 feebips,\\n        address feerecipient\\n    ) public payable override {\\n        require(feebips > 0 && feebips <= 100);\\n\\n        uint256 balancetoken = ierc20(token).balanceof(address(this));\\n        require(balancetoken >= amountminimum, 'insufficient token');\\n\\n        if (balancetoken > 0) {\\n            uint256 feeamount = balancetoken.mul(feebips) / 10_000;\\n            if (feeamount > 0) transferhelper.safetransfer(token, feerecipient, feeamount);\\n"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568852",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 83,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "uint256 amountminimum,\\n        uint256 feebips,\\n        address feerecipient\\n    ) external payable;\\n\\n    /// @notice transfers the full amount of a token held by this contract to msg.sender, with a percentage between\\n    /// 0 (exclusive) and 1 (inclusive) going to feerecipient\\n    /// @dev the amountminimum parameter preve"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568855",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 92,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "uint256 amountminimum,\\n        address recipient,\\n        uint256 feebips,\\n        address feerecipient\\n    ) external payable;\\n\\n    /// @notice transfers the full amount of a token held by this contract to recipient, with a percentage between\\n    /// 0 (exclusive) and 1 (inclusive) going to feerecipient\\n    /// @dev the amountminimum parameter preve"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568859",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 113,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "int24 internal constant min_tick = -887272;\\n    /// @dev the maximum tick that may be passed to #getsqrtratioattick computed from log base 1.0001 of 2**128\\n    int24 internal constant max_tick = -min_tick;\\n\\n    /// @dev the minimum value that can be returned from #getsqrtratioattick. equivalent to getsqrtratioattick(min_tick)\\n    uint160 internal constant min_sqrt_ratio = 4295128739;\\n    /// @dev the maximum value that can be returned from #getsqrtratioattick. equivalent to getsqrtratioattick(max_tick)\\n    uint160 internal constant max_sqrt_ratio = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev throws if |tick| > max tick\\n    /// @param tick the input tick for the above formula\\n    /// @return sqrtpricex96 a fixed point q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getsqrtratioattick(int24 tick) internal pure returns (uint160 sqrtpricex96) {\\n        uint256 abstick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(abstick <= uint256(max_tick), 't');\\n\\n        uint256 ratio = abstick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (abstick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (abstick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (abstick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (abstick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (abstick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (abstick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (abstick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (abstick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (abstick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (abstick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (abstick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (abstick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (abstick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (abstick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (abstick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (abstick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (abstick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (abstick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (abstick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a q128.128 to a q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so gettickatsqrtratio of the output price is always consistent\\n        sqrtpricex96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice calculates the greatest tick value such that getratioattick(tick) <= ratio\\n    /// @dev throws in case sqrtpricex96 < min_sqrt_ratio, as min_sqrt_ratio is the lowest value getratioattick may\\n    /// ever return.\\n    /// @param sqrtpricex96 the sqrt ratio for which to compute the tick as a q64.96\\n    /// @return tick the greatest tick for which the ratio is less than or equal to the input ratio\\n    function gettickatsqrtratio(uint160 sqrtpricex96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtpricex96 >= min_sqrt_ratio && sqrtpricex96 < max_sqrt_ratio, 'r');\\n        uint256 ratio = uint256(sqrtpricex96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xffffffffffffffffffffffffffffffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xffffffffffffffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xffffffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xffff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xff))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xf))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 ticklow = int24((log_sqrt10001 - 3402992956809132418596140100660247210)"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568863",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 128,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "int24 blockstartingtick, int24 currenttick)\\n    {\\n        uint16 observationindex;\\n        uint16 observationcardinality;\\n        (, currenttick, observationindex, observationcardinality, , , ) = pool.slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationc"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568867",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 158,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "uint32 secondsago)\\n        internal\\n        view\\n        returns (int24 arithmeticmeantick, uint128 harmonicmeanliquidity)\\n    {\\n        require(secondsago != 0, 'bp');\\n\\n        uint32[] memory secondsagos = new uint32[](2);\\n        secondsagos[0] = secondsago;\\n        secondsagos[1] = 0;\\n\\n        (int56[] memory tickcumulatives, uint160[] memory secondsperliquiditycumulativex128s) =\\n            iuniswapv3pool(pool).observe(secondsagos);\\n\\n        int56 tickcumulativesdelta = tickcumulatives[1] - tickcumulatives[0];\\n        uint160 secondsperliquiditycumulativesdelta =\\n            secondsperliquiditycumulativex128s[1] - secondsperliquiditycumulativex128s[0];\\n\\n        arithmeticmeantick = int24(tickcumulativesdelta / secondsago);\\n        // always round to negative infinity\\n        if (tickcumulativesdelta < 0 && (tickcumulativesdelta % secondsago != 0)) arithmeticmeantick--;\\n\\n        // we are multiplying here instead of shifting to ensure that harmonicmeanliquidity doesn't overflow uint128\\n        uint192 secondsagox160 = uint192(secondsago) * type(uint160).max;\\n        harmonicmeanliquidity = uint128(secondsagox160 / (uint192(secondsperliquiditycumulativesdelta) << 32));\\n    }\\n\\n    /// @notice given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick tick value used to calculate the quote\\n    /// @param baseamount amount of token to be converted\\n    /// @param basetoken address of an erc20 token contract used as the baseamount denomination\\n    /// @param quotetoken address of an erc20 token contract used as the quoteamount denomination\\n    /// @return quoteamount amount of quotetoken received for baseamount of basetoken\\n    function getquoteattick(\\n        int24 tick,\\n        uint128 baseamount,\\n        address basetoken,\\n        address quotetoken\\n    ) internal pure returns (uint256 quoteamount) {\\n        uint160 sqrtratiox96 = tickmath.getsqrtratioattick(tick);\\n\\n        // calculate quoteamount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtratiox96 <= type(uint128).max) {\\n            uint256 ratiox192 = uint256(sqrtratiox96) * sqrtratiox96;\\n            quoteamount = basetoken < quotetoken\\n                ? fullmath.muldiv(ratiox192, baseamount, 1 << 192)\\n                : fullmath.muldiv(1 << 192, baseamount, ratiox192);\\n        } else {\\n            uint256 ratiox128 = fullmath.muldiv(sqrtratiox96, sqrtratiox96, 1 << 64);\\n            quoteamount = basetoken < quotetoken\\n                ? fullmath.muldiv(ratiox128, baseamount, 1 << 128)\\n                : fullmath.muldiv(1 << 128, baseamount, ratiox128);\\n        }\\n    }\\n\\n    /// @notice given a pool, it returns the number of seconds ago of the oldest stored observation\\n    /// @param pool address of uniswap v3 pool that we want to observe\\n    /// @return secondsago the number of seconds ago of the oldest observation stored for the pool\\n    function getoldestobservationsecondsago(address pool) internal view returns (uint32 secondsago) {\\n        (, , uint16 observationindex, uint16 observationcardinality, , , ) = iuniswapv3pool(pool).slot0();\\n        require(observationcardinality > 0, 'ni');\\n\\n        (uint32 observationtimestamp, , , bool initialized) =\\n            iuniswapv3pool(pool).observations((observationindex + 1) % observationcardinality);\\n\\n        // the next index might not be initialized if the cardinality is in the process of increasing\\n        // in this case the oldest observation is always in index 0\\n        if (!initialized) {\\n            (observationtimestamp, , , ) = iuniswapv3pool(pool).observations(0);\\n        }\\n\\n        secondsago = uint32(block.timestamp) - observationtimestamp;\\n    }\\n\\n    /// @notice given a pool, it returns the tick value as of the start of the current block\\n    /// @param pool address of uniswap v3 pool\\n    /// @return the tick that the pool was in at the start of the current block\\n    function getblockstartingtickandliquidity(address pool) internal view returns (int24, uint128) {\\n        (, int24 tick, uint16 observationindex, uint16 observationcardinality, , , ) = iuniswapv3pool(pool).slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationc"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568871",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 161,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "uint256 or denominator == 0\\n    /// @param a the multiplicand\\n    /// @param b the multiplier\\n    /// @param denominator the divisor\\n    /// @return result the 256-bit result\\n    /// @dev credit to remco bloemen under mit license https://xn--2-umb.com/21/muldiv\\n    function muldiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the chinese remainder theorem to reconstruct\\n        // the 512 bit result. the result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // least significant 256 bits of the product\\n        uint256 prod1; // most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // make sure the result is less than 2**256.\\n        // also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // make divisi"
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568875",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 185,
        "pattern": "(uint|int)\\d+.*\\/\\s*\\d+",
        "snippet": "uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                   "
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.568906",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ORACLE_MANIPULATION",
      "severity": "CRITICAL",
      "name": "Oracle Manipulation / Price Oracle Attacks",
      "description": "Liquidation/steal funds, mispriced assets",
      "detection_signs": [
        "usage of single DEX pair reserves",
        "insecure TWAP windows (< minutes)",
        "reliance on single oracle"
      ],
      "verification_difficulty": "Medium",
      "mitigation": "Oracle multiplexing, longer TWAP windows, slippage limits",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 158,
        "pattern": "block\\.timestamp.*[<<=].*[0-9]{2,3}",
        "snippet": "block.timestamp - secondsago) to block.timestamp\\n    /// @return harmonicmeanliquidity the harmonic mean liquidity from (block.timestamp - secondsago) to block.timestamp\\n    function consult(address pool, uint32 secondsago)\\n        internal\\n        view\\n        returns (int24 arithmeticmeantick, uint128 harmonicmeanliquidity)\\n    {\\n        require(secondsago != 0, 'bp');\\n\\n        uint32[] memory secondsagos = new uint32[](2);\\n        secondsagos[0] = secondsago;\\n        secondsagos[1] = 0;\\n\\n        (int56[] memory tickcumulatives, uint160[] memory secondsperliquiditycumulativex128s) =\\n            iuniswapv3pool(pool).observe(secondsagos);\\n\\n        int56 tickcumulativesdelta = tickcumulatives[1] - tickcumulatives[0];\\n        uint160 secondsperliquiditycumulativesdelta =\\n            secondsperliquiditycumulativex128s[1] - secondsperliquiditycumulativex128s[0];\\n\\n        arithmeticmeantick = int24(tickcumulativesdelta / secondsago);\\n        // always round to negative infinity\\n        if (tickcumulativesdelta < 0 && (tickcumulativesdelta % secondsago != 0)) arithmeticmeantick--;\\n\\n        // we are multiplying here instead of shifting to ensure that harmonicmeanliquidity doesn't overflow uint128\\n        uint192 secondsagox160 = uint192(secondsago) * type(uint160).max;\\n        harmonicmeanliquidity = uint128(secondsagox160 / (uint192(secondsperliquiditycumulativesdelta) << 32));\\n    }\\n\\n    /// @notice given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick tick value used to calculate the quote\\n    /// @param baseamount amount of token to be converted\\n    /// @param basetoken address of an erc20 token contract used as the baseamount denomination\\n    /// @param quotetoken address of an erc20 token contract used as the quoteamount denomination\\n    /// @return quoteamount amount of quotetoken received for baseamount of basetoken\\n    function getquoteattick(\\n        int24 tick,\\n        uint128 baseamount,\\n        address basetoken,\\n        address quotetoken\\n    ) internal pure returns (uint256 quoteamount) {\\n        uint160 sqrtratiox96 = tickmath.getsqrtratioattick(tick);\\n\\n        // calculate quoteamount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtratiox96 <= type(uint128).max) {\\n            uint256 ratiox192 = uint256(sqrtratiox96) * sqrtratiox96;\\n            quoteamount = basetoken < quotetoken\\n                ? fullmath.muldiv(ratiox192, baseamount, 1 << 192)\\n                : fullmath.muldiv(1 << 192, baseamount, ratiox192);\\n        } else {\\n            uint256 ratiox128 = fullmath.muldiv(sqrtratiox96, sqrtratiox96, 1 << 64);\\n            quoteamount = basetoken < quotetoken\\n                ? fullmath.muldiv(ratiox128, baseamount, 1 << 128)\\n                : fullmath.muldiv(1 << 128, baseamount, ratiox128);\\n        }\\n    }\\n\\n    /// @notice given a pool, it returns the number of seconds ago of the oldest stored observation\\n    /// @param pool address of uniswap v3 pool that we want to observe\\n    /// @return secondsago the number of seconds ago of the oldest observation stored for the pool\\n    function getoldestobservationsecondsago(address pool) internal view returns (uint32 secondsago) {\\n        (, , uint16 observationindex, uint16 observationcardinality, , , ) = iuniswapv3pool(pool).slot0();\\n        require(observationcardinality > 0, 'ni');\\n\\n        (uint32 observationtimestamp, , , bool initialized) =\\n            iuniswapv3pool(pool).observations((observationindex + 1) % observationcardinality);\\n\\n        // the next index might not be initialized if the cardinality is in the process of increasing\\n        // in this case the oldest observation is always in index 0\\n        if (!initialized) {\\n            (observationtimestamp, , , ) = iuniswapv3pool(pool).observations(0);\\n        }\\n\\n        secondsago = uint32(block.timestamp) - observationtimestamp;\\n    }\\n\\n    /// @notice given a pool, it returns the tick value as of the start of the current block\\n    /// @param pool address of uniswap v3 pool\\n    /// @return the tick that the pool was in at the start of the current block\\n    function getblockstartingtickandliquidity(address pool) internal view returns (int24, uint128) {\\n        (, int24 tick, uint16 observationindex, uint16 observationcardinality, , , ) = iuniswapv3pool(pool).slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationcardinality > 1, 'neo');\\n\\n        // if the latest observation occurred in the past, then no tick-changing trades have happened in this block\\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\\n        // we don't need to check if this observation is initialized - it is guaranteed to be.\\n        (uint32 observationtimestamp, int56 tickcumulative, uint160 secondsperliquiditycumulativex128, ) =\\n            iuniswapv3pool(pool).observations(observationindex);\\n        if (observationtimestamp != uint32(block.timestamp)) {\\n            return (tick, iuniswapv3pool(pool).liquidity());\\n        }\\n\\n        uint256 previndex = (uint256(observationindex) + observationcardinality - 1) % observationcardinality;\\n        (\\n            uint32 prevobservationtimestamp,\\n            int56 prevtickcumulative,\\n            uint160 prevsecondsperliquiditycumulativex128,\\n            bool previnitialized\\n        ) = iuniswapv3pool(pool).observations(previndex);\\n\\n        require(previnitialized, 'oni');\\n\\n        uint32 delta = observationtimestamp - prevobservationtimestamp;\\n        tick = int24((tickcumulative - prevtickcumulative) / delta);\\n        uint128 liquidity =\\n            uint128(\\n                (uint192(delta) * type(uint160).max) /\\n                    (uint192(secondsperliquiditycumulativex128 - prevsecondsperliquiditycumulativex128) << 32)\\n            );\\n        return (tick, liquidity);\\n    }\\n\\n    /// @notice information for calculating a weighted arithmetic mean tick\\n    struct weightedtickdata {\\n        int24 tick;\\n        uint128 weight;\\n    }\\n\\n    /// @notice given an array of ticks and weights, calculates the weighted arithmetic mean tick\\n    /// @param weightedtickdata an array of ticks and weights\\n    /// @return weightedarithmeticmeantick the weighted arithmetic mean tick\\n    /// @dev each entry of `weightedtickdata` should represents ticks from pools with the same underlying pool tokens. if they do not,\\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\\n    /// @dev note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\\n    function getweightedarithmeticmeantick(weightedtickdata[] memory weightedtickdata)\\n        internal\\n        pure\\n        returns (int24 weightedarithmeticmeantick)\\n    {\\n        // accumulates the sum of products between each tick and its weight\\n        int256 numerator;\\n\\n        // accumulates the sum of the weights\\n        uint256 denominator;\\n\\n        // products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\\n        for (uint256 i; i < weightedtickdata.length; i++) {\\n            numerator += weightedtickdata[i].tick * int256(weightedtickdata[i].weight);\\n            denominator += weightedtickdata[i].weight;\\n        }\\n\\n        weightedarithmeticmeantick = int24(numerator / int256(denominator));\\n        // always round to negative infinity\\n        if (numerator < 0 && (numerator % int256(denominator) != 0)) weightedarithmeticmeantick--;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contr"
      },
      "evidence": [
        "Timestamp manipulation in oracle"
      ],
      "recommendation": "Oracle multiplexing, longer TWAP windows, slippage limits",
      "discovered_at": "2025-09-21T16:37:19.575104",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "APPROVAL_MISUSE",
      "severity": "HIGH",
      "name": "Approval misuse / Unlimited approvals",
      "description": "Funds can be drained by approved spender",
      "detection_signs": [
        "large allowance events",
        "allowance > threshold",
        "suspicious spender addresses"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Limited allowances, permit patterns, UI warnings",
      "exploitable": true,
      "confidence": 0.8,
      "location": {
        "line": 29,
        "pattern": "allowance.*\\*.*2",
        "snippet": "allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * important: beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. one possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/eips/issues/20#issuecomment-263524729\\n     *\\n     * emits an {approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * emits a {transfer} event.\\n     */\\n    function transferfrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * note that `value` may be zero.\\n     */\\n    event transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/drafts/ierc20permit.sol\": {\r\n      \"content\":"
      },
      "evidence": [
        "Unlimited approval detected",
        "Potential fund drain risk"
      ],
      "recommendation": "Limited allowances, permit patterns, UI warnings",
      "discovered_at": "2025-09-21T16:37:19.581675",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "APPROVAL_MISUSE",
      "severity": "HIGH",
      "name": "Approval misuse / Unlimited approvals",
      "description": "Funds can be drained by approved spender",
      "detection_signs": [
        "large allowance events",
        "allowance > threshold",
        "suspicious spender addresses"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Limited allowances, permit patterns, UI warnings",
      "exploitable": true,
      "confidence": 0.8,
      "location": {
        "line": 32,
        "pattern": "allowance.*\\*.*2",
        "snippet": "allowance (see {ierc20-allowance}) by\\n * presenting a message signed by the account. by not relying on `{ierc20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold ether at all.\\n */\\ninterface ierc20permit {\\n    /**\\n     * @dev sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * important: the same issues {ierc20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * emits an {approval} event.\\n     *\\n     * requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the eip712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * for more information on the signature format, see the\\n     * https://eips.ethereum.org/eips/eip-2612#specification[relevant eip\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev returns the current nonce for `owner`. this value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * every successful call to {permit} increases ``owner``'s nonce by one. this\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the domain separator used in the encoding of the signature for `permit`, as defined by {eip712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function domain_separator() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/iselfpermit.sol\": {\r\n      \"conten"
      },
      "evidence": [
        "Unlimited approval detected",
        "Potential fund drain risk"
      ],
      "recommendation": "Limited allowances, permit patterns, UI warnings",
      "discovered_at": "2025-09-21T16:37:19.581698",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 23,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function mint(mintparams calldata params) external payable override returns (bytes memory result) {\\n        return\\n            callpositionmanager(\\n                abi.encodewithselector(\\n        "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585717",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 50,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function mint(mintparams calldata params) external payable returns (bytes memory result);\\n\\n    struct increaseliquidityparams {\\n        address token0;\\n        address token1;\\n        uint256 tok"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585737",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 62,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice returns x - y, reverts if underflows\\n    /// @param x the minuend\\"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585742",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 62,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice returns x - y, reverts if overflows or underflows\\n    ///"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585747",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 107,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0out, uint amount1out, address "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585751",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 107,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0out, uint amount1out, address to, bytes calldata data) external;\\n    function skim(address to) "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585755",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 140,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function mint(\\n        address recipient,\\n        int24 ticklower,\\n        int24 tickupper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 a"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585759",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 140,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function burn(\\n        int24 ticklower,\\n        int24 tickupper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice swap token0 for token1, or tok"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585762",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 143,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function setfeeprotocol(uint8 feeprotocol0, uint8 feeprotocol1) external;\\n\\n    /// @notice collect the protocol fee accrued to the pool\\n    /// @param recipient the address to which collected proto"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585766",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 164,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function mint(mintparams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenid,\\n            uint128 liquidity,\\n            uint256 amount0,\\n           "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585770",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 164,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function burn(uint256 tokenid) external payable;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/erc721/ierc721metadata.sol\": {\r\n      \"content\": \"// spdx-license-identifier: mit\\n\\npragma solidity "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585774",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 179,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function setapprovalforall(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * see {setappr"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.585777",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
      "vulnerability_type": "UNINITIALIZED_STORAGE",
      "severity": "CRITICAL",
      "name": "Uninitialized storage / constructor misconfig",
      "description": "Takeover via uninitialized ownership",
      "detection_signs": [
        "absence of initialized flag",
        "proxy with implementation that exposes initializer"
      ],
      "verification_difficulty": "Medium",
      "mitigation": "Initializer modifiers, deployment protection",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 11,
        "pattern": "constructor",
        "snippet": "\\n        factory = _factory;\\n        weth9 = _weth9;\\n    "
      },
      "evidence": [
        "Potentially uninitialized state variables",
        "Proxy pattern initialization risk"
      ],
      "recommendation": "Initializer modifiers, deployment protection",
      "discovered_at": "2025-09-21T16:37:19.587750",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 15,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function setfeeto(address) external;\r\n    function setfeetosetter(address) external;\r\n}\r\n\r\ninterface iuniswapv2pair {\r\n    event approval(address indexed owner, address indexed spender, uint value);\r\n"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742818",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 16,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function setfeetosetter(address) external;\r\n}\r\n\r\ninterface iuniswapv2pair {\r\n    event approval(address indexed owner, address indexed spender, uint value);\r\n    event transfer(address indexed from, a"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742837",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 61,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0out, uint amount1out, address "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742842",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 62,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0out, uint amount1out, address to, bytes calldata data) external;\r\n    function skim(address to) "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742847",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 74,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function addliquidity(\r\n        address tokena,\r\n        address tokenb,\r\n        uint amountadesired,\r\n        uint amountbdesired,\r\n        uint amountamin,\r\n        uint amountbmin,\r\n        addres"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742850",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 84,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function addliquidityeth(\r\n        address token,\r\n        uint amounttokendesired,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n        uint deadline\r\n    ) externa"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742854",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 92,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidity(\r\n        address tokena,\r\n        address tokenb,\r\n        uint liquidity,\r\n        uint amountamin,\r\n        uint amountbmin,\r\n        address to,\r\n        uint deadline\r\n  "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742858",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 101,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidityeth(\r\n        address token,\r\n        uint liquidity,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n        uint deadline\r\n    ) external retu"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742861",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 109,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquiditywithpermit(\r\n        address tokena,\r\n        address tokenb,\r\n        uint liquidity,\r\n        uint amountamin,\r\n        uint amountbmin,\r\n        address to,\r\n        uint de"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742865",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 119,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidityethwithpermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n        uint deadline,\r\n        "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742869",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 165,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidityethsupportingfeeontransfertokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n        uint "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742873",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 173,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidityethwithpermitsupportingfeeontransfertokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n   "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742876",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 276,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function addliquidity(\r\n        address tokena,\r\n        address tokenb,\r\n        uint amountadesired,\r\n        uint amountbdesired,\r\n        uint amountamin,\r\n        uint amountbmin,\r\n        addres"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742880",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 292,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function addliquidityeth(\r\n        address token,\r\n        uint amounttokendesired,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n        uint deadline\r\n    ) externa"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742883",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 318,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidity(\r\n        address tokena,\r\n        address tokenb,\r\n        uint liquidity,\r\n        uint amountamin,\r\n        uint amountbmin,\r\n        address to,\r\n        uint deadline\r\n  "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742886",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 335,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidityeth(\r\n        address token,\r\n        uint liquidity,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n        uint deadline\r\n    ) public virtua"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742890",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 356,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquiditywithpermit(\r\n        address tokena,\r\n        address tokenb,\r\n        uint liquidity,\r\n        uint amountamin,\r\n        uint amountbmin,\r\n        address to,\r\n        uint de"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742893",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 371,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidityethwithpermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n        uint deadline,\r\n        "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742897",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 387,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidityethsupportingfeeontransfertokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n        uint "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742900",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 408,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function removeliquidityethwithpermitsupportingfeeontransfertokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amounttokenmin,\r\n        uint amountethmin,\r\n        address to,\r\n   "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742904",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 666,
        "pattern": "function\\s+(mint|burn|pause|unpause|set|update|add|remove)",
        "snippet": "function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n "
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.742907",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9",
      "vulnerability_type": "UNCHECKED_RETURN",
      "severity": "MEDIUM",
      "name": "Unchecked send/transfer failure handling",
      "description": "Locked funds, unexpected failures",
      "detection_signs": [
        "address.call.value()/transfer() without conditional handling",
        "assumption that transfers always succeed"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Always check return values, use pull payments",
      "exploitable": true,
      "confidence": 0.7,
      "location": {
        "line": 14,
        "pattern": "(call|delegatecall|staticcall)\\([^)]*\\)[^;]*;",
        "snippet": "delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n        // delegatecall returns 0 on error.\\n        case 0 {\\n          revert(0, returndatasize())\\n        }\\n        default {\\n          return(0, returndatasize())\\n        }\\n    }\\n  }\\n\\n  /**\\n   * @dev function that is run as the first thing in the fallback function.\\n   * can be redefined in derived contracts to add functionality.\\n   * redefinitions must call super._willfallback().\\n   */\\n  function _willfallback() internal virtual {}\\n\\n  /**\\n   * @dev fallback implementation.\\n   * extracted to enable manual triggering.\\n   */\\n  function _fallback() internal {\\n    _willfallback();\\n    _delegate(_implementation());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/con"
      },
      "evidence": [
        "Unchecked external call return value",
        "Potential failed transaction without handling"
      ],
      "recommendation": "Always check return values, use pull payments",
      "discovered_at": "2025-09-21T16:37:19.836472",
      "scanner_priority": 2
    },
    {
      "contract_address": "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9",
      "vulnerability_type": "DELEGATECALL_UNTRUSTED",
      "severity": "CRITICAL",
      "name": "Delegatecall to Untrusted Implementation",
      "description": "Full takeover, arbitrary code execution",
      "detection_signs": [
        "DELEGATECALL + admin/upgrade functions present",
        "owner is EOA or timeless control"
      ],
      "verification_difficulty": "High",
      "mitigation": "Multisig upgrades, timelocks, transparent/UDS proxies",
      "exploitable": true,
      "confidence": 0.8,
      "location": {
        "line": 8,
        "pattern": "(implementation|proxy|transparent|uups).*upgrade",
        "snippet": "proxy.sol';\\n\\n/**\\n * @title baseimmutableadminupgradeabilityproxy\\n * @author aave, inspired by the openzeppelin upgradeability proxy pattern\\n * @dev this contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks. the admin role is stored in an immutable, which\\n * helps saving transactions costs\\n * all external functions in this contract must be guarded by the\\n * `ifadmin` modifier. see ethereum/solidity#3864 for a solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract baseimmutableadminupgradeabilityproxy is baseupgradeabilityproxy {\\n  address immutable admin;\\n\\n  constructor(address admin) public {\\n    admin = admin;\\n  }\\n\\n  modifier ifadmin() {\\n    if (msg.sender == admin) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return the address of the proxy admin.\\n   */\\n  function admin() external ifadmin returns (address) {\\n    return admin;\\n  }\\n\\n  /**\\n   * @return the address of the implementation.\\n   */\\n  function implementation() external ifadmin returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev upgrade the backing implementation of the proxy.\\n   * only the admin can call this function.\\n   * @param newimplementation address of the new implementation.\\n   */\\n  function upgradeto(address newimplementation) external ifadmin {\\n    _upgradeto(newimplementation);\\n  }\\n\\n  /**\\n   * @dev upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * this is useful to initialize the proxied contract.\\n   * @param newimplementation address of the new implementation.\\n   * @param data data to send as msg.data in the low level call.\\n   * it should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradetoandcall(address newimplementation, bytes calldata data)\\n    external\\n    payable\\n    ifadmin\\n  {\\n    _upgradeto(newimplementation);\\n    (bool success, ) = newimplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @dev only fall back when the sender is not the admin.\\n   */\\n  function"
      },
      "evidence": [
        "Delegatecall to potentially untrusted implementation",
        "Arbitrary code execution risk"
      ],
      "recommendation": "Multisig upgrades, timelocks, transparent/UDS proxies",
      "discovered_at": "2025-09-21T16:37:19.836999",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9",
      "vulnerability_type": "DELEGATECALL_UNTRUSTED",
      "severity": "CRITICAL",
      "name": "Delegatecall to Untrusted Implementation",
      "description": "Full takeover, arbitrary code execution",
      "detection_signs": [
        "DELEGATECALL + admin/upgrade functions present",
        "owner is EOA or timeless control"
      ],
      "verification_difficulty": "High",
      "mitigation": "Multisig upgrades, timelocks, transparent/UDS proxies",
      "exploitable": true,
      "confidence": 0.8,
      "location": {
        "line": 8,
        "pattern": "(admin|owner).*implementation",
        "snippet": "adminupgradeabilityproxy\\n * @author aave, inspired by the openzeppelin upgradeability proxy pattern\\n * @dev this contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks. the admin role is stored in an immutable, which\\n * helps saving transactions costs\\n * all external functions in this contract must be guarded by the\\n * `ifadmin` modifier. see ethereum/solidity#3864 for a solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract baseimmutableadminupgradeabilityproxy is baseupgradeabilityproxy {\\n  address immutable admin;\\n\\n  constructor(address admin) public {\\n    admin = admin;\\n  }\\n\\n  modifier ifadmin() {\\n    if (msg.sender == admin) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return the address of the proxy admin.\\n   */\\n  function admin() external ifadmin returns (address) {\\n    return admin;\\n  }\\n\\n  /**\\n   * @return the address of the implementation.\\n   */\\n  function implementation() external ifadmin returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev upgrade the backing implementation of the proxy.\\n   * only the admin can call this function.\\n   * @param newimplementation address of the new implementation.\\n   */\\n  function upgradeto(address newimplementation) external ifadmin {\\n    _upgradeto(newimplementation);\\n  }\\n\\n  /**\\n   * @dev upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * this is useful to initialize the proxied contract.\\n   * @param newimplementation address of the new implementation.\\n   * @param data data to send as msg.data in the low level call.\\n   * it should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradetoandcall(address newimplementation, bytes calldata data)\\n    external\\n    payable\\n    ifadmin\\n  {\\n    _upgradeto(newimplementation);\\n    (bool success, ) = newimplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @dev only fall back when the sender is not the admin.\\n   */\\n  function _willfallback() internal virtual override {\\n    require(msg.se"
      },
      "evidence": [
        "Delegatecall to potentially untrusted implementation",
        "Arbitrary code execution risk"
      ],
      "recommendation": "Multisig upgrades, timelocks, transparent/UDS proxies",
      "discovered_at": "2025-09-21T16:37:19.837008",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9",
      "vulnerability_type": "DELEGATECALL_UNTRUSTED",
      "severity": "CRITICAL",
      "name": "Delegatecall to Untrusted Implementation",
      "description": "Full takeover, arbitrary code execution",
      "detection_signs": [
        "DELEGATECALL + admin/upgrade functions present",
        "owner is EOA or timeless control"
      ],
      "verification_difficulty": "High",
      "mitigation": "Multisig upgrades, timelocks, transparent/UDS proxies",
      "exploitable": true,
      "confidence": 0.8,
      "location": {
        "line": 8,
        "pattern": "address.*\\.delegatecall",
        "snippet": "address immutable admin;\\n\\n  constructor(address admin) public {\\n    admin = admin;\\n  }\\n\\n  modifier ifadmin() {\\n    if (msg.sender == admin) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @return the address of the proxy admin.\\n   */\\n  function admin() external ifadmin returns (address) {\\n    return admin;\\n  }\\n\\n  /**\\n   * @return the address of the implementation.\\n   */\\n  function implementation() external ifadmin returns (address) {\\n    return _implementation();\\n  }\\n\\n  /**\\n   * @dev upgrade the backing implementation of the proxy.\\n   * only the admin can call this function.\\n   * @param newimplementation address of the new implementation.\\n   */\\n  function upgradeto(address newimplementation) external ifadmin {\\n    _upgradeto(newimplementation);\\n  }\\n\\n  /**\\n   * @dev upgrade the backing implementation of the proxy and call a function\\n   * on the new implementation.\\n   * this is useful to initialize the proxied contract.\\n   * @param newimplementation address of the new implementation.\\n   * @param data data to send as msg.data in the low level call.\\n   * it should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   */\\n  function upgradetoandcall(address newimplementation, bytes calldata data)\\n    external\\n    payable\\n    ifadmin\\n  {\\n    _upgradeto(newimplementation);\\n    (bool success, ) = newimplementation.delegatecall(data);\\n    require(success);\\n  }\\n\\n  /**\\n   * @dev only fall back when the sender is not the admin.\\n   */\\n  function _willfallback() internal virtual override {\\n    require(msg.sender != admin"
      },
      "evidence": [
        "Delegatecall to potentially untrusted implementation",
        "Arbitrary code execution risk"
      ],
      "recommendation": "Multisig upgrades, timelocks, transparent/UDS proxies",
      "discovered_at": "2025-09-21T16:37:19.837011",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9",
      "vulnerability_type": "DELEGATECALL_UNTRUSTED",
      "severity": "CRITICAL",
      "name": "Delegatecall to Untrusted Implementation",
      "description": "Full takeover, arbitrary code execution",
      "detection_signs": [
        "DELEGATECALL + admin/upgrade functions present",
        "owner is EOA or timeless control"
      ],
      "verification_difficulty": "High",
      "mitigation": "Multisig upgrades, timelocks, transparent/UDS proxies",
      "exploitable": true,
      "confidence": 0.8,
      "location": {
        "line": 20,
        "pattern": "address.*\\.delegatecall",
        "snippet": "address of the initial implementation.\\n   * @param _data data to send as msg.data to the implementation to initialize the proxied contract.\\n   * it should include the signature and the parameters of the function to be called, as described in\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n   * this parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n   */\\n  function initialize(address _logic, bytes memory _data) public payable {\\n    require(_implementation() == address(0));\\n    assert(implementation_slot == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setimplementation(_logic);\\n    if (_data.length > 0) {\\n      (bool success, ) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmversion\": \"istanbul\",\r\n    \"outputsele"
      },
      "evidence": [
        "Delegatecall to potentially untrusted implementation",
        "Arbitrary code execution risk"
      ],
      "recommendation": "Multisig upgrades, timelocks, transparent/UDS proxies",
      "discovered_at": "2025-09-21T16:37:19.837015",
      "scanner_priority": 1
    },
    {
      "contract_address": "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9",
      "vulnerability_type": "INTEGER_OVERFLOW",
      "severity": "HIGH",
      "name": "Integer overflow/underflow",
      "description": "Wrong balances/pricing, supply manipulation",
      "detection_signs": [
        "arithmetic ops without Solidity >=0.8 guards",
        "missing SafeMath usage in older contracts"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "exploitable": true,
      "confidence": 0.6,
      "location": {
        "line": 20,
        "pattern": "(uint|int)\\d+.*[+-].*\\d+",
        "snippet": "uint256(keccak256('eip1967.proxy.implementation')) - 1));\\n    _setimplementation(_logic);\\n    if (_data.length > 0) {\\n      (bool success, ) = _logic.delegatecall(_data);\\n      require(success);\\n    }\\n  }\\n}\\n\""
      },
      "evidence": [
        "Arithmetic operations without overflow protection",
        "Potential integer overflow/underflow"
      ],
      "recommendation": "Use Solidity >=0.8+ or checked arithmetic libraries",
      "discovered_at": "2025-09-21T16:37:19.837918",
      "scanner_priority": 3
    },
    {
      "contract_address": "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9",
      "vulnerability_type": "ACCESS_CONTROL",
      "severity": "CRITICAL",
      "name": "Access control bugs",
      "description": "Anyone can call admin functions: mint, pause, upgrade",
      "detection_signs": [
        "sensitive functions without owner checks",
        "public/external incorrectly marked admin functions"
      ],
      "verification_difficulty": "Low",
      "mitigation": "Explicit modifiers, tests, formal verification",
      "exploitable": true,
      "confidence": 0.9,
      "location": {
        "line": 8,
        "pattern": "function\\s+(admin|owner|only|require)\\s*\\(",
        "snippet": "function admin() external ifadmin returns (address) {\\n    return admin;\\n  }\\n\\n  /**\\n   * @return the address of the implementation.\\n   */\\n  function implementation() external ifadmin returns (ad"
      },
      "evidence": [
        "Sensitive function without proper access control",
        "Potential unauthorized execution risk"
      ],
      "recommendation": "Explicit modifiers, tests, formal verification",
      "discovered_at": "2025-09-21T16:37:19.838395",
      "scanner_priority": 1
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x397FF1",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x6B1754",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x123456",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x7Fc665",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x234567",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0xA0b86a",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x345678",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x1f9840",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x000000",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x2260FA",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x0d500B",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x7ceB23",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x123456",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x7ceb23",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x234567",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x345678",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x123456",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x234567",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x345678",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x912CE5",
      "contract_address": "unknown"
    },
    {
      "pattern": "transfer",
      "name": "Token Transfer Reentrancy",
      "impact": "CRITICAL",
      "description": "Potential reentrancy vulnerability in transfer function",
      "detection_signs": [
        "transfer(address,uint256)"
      ],
      "exploit_potential": 8.0,
      "difficulty": "HIGH",
      "contract_name": "Token-0x82aF49",
      "contract_address": "unknown"
    }
  ],
  "last_updated": 1758476574.9425356
}