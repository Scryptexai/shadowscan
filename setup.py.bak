#!/usr/bin/env python3
"""
ShadowScan Setup Script

Advanced Security Scanning Framework for Web Applications and Blockchain
Author: Ghost Attacker <ghost@attacker.dev>
"""

import os
import sys
from pathlib import Path
from setuptools import setup, find_packages

# Ensure we're using Python 3.8+
if sys.version_info < (3, 8):
    sys.exit("ShadowScan requires Python 3.8 or higher.")

# Get the long description from README
HERE = Path(__file__).parent
README_PATH = HERE / "README.md"

def get_long_description():
    """Get long description from README.md."""
    if README_PATH.exists():
        with open(README_PATH, encoding="utf-8") as f:
            return f.read()
    return "Advanced Security Scanning Framework for Web Applications and Blockchain"

def get_version():
    """Get version from shadowscan/__init__.py."""
    version_file = HERE / "shadowscan" / "__init__.py"
    if version_file.exists():
        with open(version_file, encoding="utf-8") as f:
            for line in f:
                if line.startswith("__version__"):
                    return line.split("=")[1].strip().strip('"').strip("'")
    return "1.0.0"

def get_requirements():
    """Get requirements from requirements.txt."""
    requirements_file = HERE / "requirements.txt"
    if requirements_file.exists():
        with open(requirements_file, encoding="utf-8") as f:
            requirements = []
            for line in f:
                line = line.strip()
                # Skip empty lines and comments
                if line and not line.startswith("#"):
                    requirements.append(line)
            return requirements
    
    # Fallback requirements if file doesn't exist
    return [
        "requests>=2.31.0",
        "click>=8.1.0",
        "colorama>=0.4.6", 
        "rich>=13.0.0",
        "pydantic>=2.0.0",
        "web3>=6.0.0",
        "aiohttp>=3.8.0",
        "python-dotenv>=1.0.0",
        "PyYAML>=6.0",
        "beautifulsoup4>=4.12.0",
        "lxml>=4.9.0",
        "selenium>=4.15.0",
        "httpx>=0.25.0",
        "cryptography>=41.0.0",
        "eth-abi>=4.0.0",
        "eth-utils>=2.3.0",
        "tenacity>=8.2.0",
        "tqdm>=4.66.0",
        "tabulate>=0.9.0",
        "jinja2>=3.1.0",
        "marshmallow>=3.20.0",
        "jsonschema>=4.17.0",
    ]

def get_dev_requirements():
    """Get development requirements."""
    return [
        "pytest>=7.4.0",
        "pytest-cov>=4.1.0", 
        "pytest-asyncio>=0.21.0",
        "pytest-mock>=3.11.0",
        "black>=23.7.0",
        "isort>=5.12.0",
        "flake8>=6.0.0",
        "mypy>=1.5.0",
        "pre-commit>=3.3.0",
        "tox>=4.6.0",
        "coverage>=7.2.0",
        "bandit>=1.7.5",
        "safety>=2.3.0",
    ]

# Package configuration
setup(
    name="shadowscan",
    version=get_version(),
    author="Ghost Attacker",
    author_email="ghost@attacker.dev",
    description="Advanced Security Scanning Framework for Web Applications and Blockchain",
    long_description=get_long_description(),
    long_description_content_type="text/markdown",
    url="https://github.com/ghostattacker/shadowscan",
    project_urls={
        "Bug Tracker": "https://github.com/ghostattacker/shadowscan/issues",
        "Documentation": "https://shadowscan.readthedocs.io/",
        "Source Code": "https://github.com/ghostattacker/shadowscan",
        "Changelog": "https://github.com/ghostattacker/shadowscan/blob/main/CHANGELOG.md",
    },
    
    # Package discovery
    packages=find_packages(
        where=".",
        include=["shadowscan*"],
        exclude=["tests*", "docs*", "*.egg-info"]
    ),
    
    # Python version requirement
    python_requires=">=3.8",
    
    # Dependencies
    install_requires=get_requirements(),
    
    # Optional dependencies
    extras_require={
        "dev": get_dev_requirements(),
        "docs": [
            "sphinx>=7.1.0",
            "sphinx-rtd-theme>=1.3.0",
            "myst-parser>=2.0.0",
            "sphinx-click>=5.0.0",
        ],
        "blockchain": [
            "eth-brownie>=1.20.0",
            "mythril>=0.24.0",
            "manticore>=0.3.7",
        ],
        "web": [
            "playwright>=1.37.0", 
            "scrapy>=2.11.0",
            "wapiti3>=3.1.7",
        ],
        "analysis": [
            "bandit>=1.7.5",
            "safety>=2.3.0",
            "slither-analyzer>=0.9.0",
            "semgrep>=1.45.0",
        ],
    },
    
    # Entry points for CLI commands
    entry_points={
        "console_scripts": [
            "shadowscan=shadowscan.cli:main",
            "shadowscan-web=shadowscan.modules.web:main",
            "shadowscan-blockchain=shadowscan.modules.blockchain:main",
        ],
        "shadowscan.modules": [
            "web=shadowscan.modules.web",
            "blockchain=shadowscan.modules.blockchain",
            "base=shadowscan.modules.base",
        ],
    },
    
    # Package data
    package_data={
        "shadowscan": [
            "config/*.yaml",
            "config/*.yml", 
            "config/*.json",
            "templates/*.html",
            "templates/*.j2",
            "static/*",
            "data/*",
        ],
    },
    include_package_data=True,
    
    # Classifiers
    classifiers=[
        "Development Status :: 4 - Beta",
        "Environment :: Console",
        "Intended Audience :: Developers",
        "Intended Audience :: Information Technology",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9", 
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Topic :: Security",
        "Topic :: Internet :: WWW/HTTP",
        "Topic :: Software Development :: Testing",
        "Topic :: System :: Networking :: Monitoring",
    ],
    
    # Keywords
    keywords=[
        "security",
        "scanning", 
        "vulnerability",
        "blockchain",
        "web",
        "penetration-testing",
        "security-audit",
        "smart-contracts",
    ],
    
    # License
    license="MIT",
    
    # Zip safe
    zip_safe=False,
    
    # Additional metadata
    platforms=["any"],
)

# Post-installation checks
def post_install_check():
    """Run post-installation checks."""
    try:
        import shadowscan
        print(f"✅ ShadowScan {shadowscan.__version__} installed successfully!")
        print(f"🔧 Run 'shadowscan --help' to get started")
        print(f"📖 Documentation: https://shadowscan.readthedocs.io/")
    except ImportError as e:
        print(f"❌ Installation verification failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    setup()
    
    # Only run post-install check if this was called directly
    if len(sys.argv) > 1 and "install" in sys.argv:
        try:
            post_install_check()
        except Exception:
            # Don't fail installation if post-check fails
            pass
